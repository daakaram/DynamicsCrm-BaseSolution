//         Project / File: Yagasoft.Plugins.Common / CrmSchema.cs
// File generated by: CRM Code Generator - Eric Labashosky, Ahmed Elsawalhy

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Text;
using System.Runtime.Serialization;
using System.Reflection;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Query;

[assembly: ProxyTypesAssemblyAttribute()]
namespace Yagasoft.Plugins.Common
{
	#region XrmServiceContext

	/// <summary>
	/// Represents a source of entities bound to a CRM service. It tracks and manages changes made to the retrieved entities.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode()]
	public partial class XrmServiceContext : OrganizationServiceContext
	{
		/// <summary>
		/// Constructor.
		/// </summary>
		public XrmServiceContext(IOrganizationService service) : 
				base(service)
		{
		}

		/// <summary>
		/// Gets a binding to the set of all <see cref="ActivityParty"/> entities.
		/// </summary>
		public System.Linq.IQueryable<ActivityParty> ActivityPartySet
		{
			get
			{
				return this.CreateQuery<ActivityParty>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="ldv_ldv_customjob_ldv_recurrencerule"/> entities.
		/// </summary>
		public System.Linq.IQueryable<ldv_ldv_customjob_ldv_recurrencerule> ldv_ldv_customjob_ldv_recurrenceruleSet
		{
			get
			{
				return this.CreateQuery<ldv_ldv_customjob_ldv_recurrencerule>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="ldv_ldv_recurrencerule_ldv_recurrenceexgrou"/> entities.
		/// </summary>
		public System.Linq.IQueryable<ldv_ldv_recurrencerule_ldv_recurrenceexgrou> ldv_ldv_recurrencerule_ldv_recurrenceexgrouSet
		{
			get
			{
				return this.CreateQuery<ldv_ldv_recurrencerule_ldv_recurrenceexgrou>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="ldv_ldv_recurrencerule_ldv_recurrenceruleex"/> entities.
		/// </summary>
		public System.Linq.IQueryable<ldv_ldv_recurrencerule_ldv_recurrenceruleex> ldv_ldv_recurrencerule_ldv_recurrenceruleexSet
		{
			get
			{
				return this.CreateQuery<ldv_ldv_recurrencerule_ldv_recurrenceruleex>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="ldv_ldv_recurrenceruleexceptiongrouping_ldv"/> entities.
		/// </summary>
		public System.Linq.IQueryable<ldv_ldv_recurrenceruleexceptiongrouping_ldv> ldv_ldv_recurrenceruleexceptiongrouping_ldvSet
		{
			get
			{
				return this.CreateQuery<ldv_ldv_recurrenceruleexceptiongrouping_ldv>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="Log"/> entities.
		/// </summary>
		public System.Linq.IQueryable<Log> LogSet
		{
			get
			{
				return this.CreateQuery<Log>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="RecurrenceRule"/> entities.
		/// </summary>
		public System.Linq.IQueryable<RecurrenceRule> RecurrenceRuleSet
		{
			get
			{
				return this.CreateQuery<RecurrenceRule>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="RecurrenceRuleException"/> entities.
		/// </summary>
		public System.Linq.IQueryable<RecurrenceRuleException> RecurrenceRuleExceptionSet
		{
			get
			{
				return this.CreateQuery<RecurrenceRuleException>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="RecurrenceRuleExceptionGrouping"/> entities.
		/// </summary>
		public System.Linq.IQueryable<RecurrenceRuleExceptionGrouping> RecurrenceRuleExceptionGroupingSet
		{
			get
			{
				return this.CreateQuery<RecurrenceRuleExceptionGrouping>();
			}
		}
	}

	#endregion

	#region Extensions

    public class ValidationError
    {
        public Guid? RecordId;
        public string AttributeName;

        public ValidationType ErrorType;
        public IDictionary<int, string> ErrorMessage;

        public string StringValue;
        public int? StringMaxLength;

        public decimal? NumericValue;
        public decimal? NumericRangeMin;
        public decimal? NumericRangeMax;
    }

	public class ValidationLocalisation
	{
		public ValidationType ErrorType;
		/// <summary>
		/// A dictionary of language code as key and message format as value
		/// </summary>
		public IDictionary<int, string> Localisation;
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public static class CrmGeneratorExtensions
	{
		/// <summary>
		/// Retrieves the label of the 'OptionSetValue' using the corresponding enum member constant
		/// and the language code given.
		/// </summary>
		/// <param name="enumMember">The early-bound enum member constant; e.g.: 'Account.Enums.IndustryCode.Accounting'</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns>The label corresponding to the enum constant and the language code.</returns>
		public static string GetLabel(this Enum enumMember, int languageCode = 1033)
		{
			var enumType = enumMember.GetType();
			var enumParentType = enumType.DeclaringType;

			if (enumParentType == null)
			{
				return "NO_LABEL";
			}

			var enumsType = enumParentType.GetNestedType("Enums");

			if (enumsType == null)
			{
				return "NO_LABEL";
			}

			var labelsType = enumsType.GetNestedType("Labels");

			if (labelsType == null)
			{
				return "NO_LABEL";
			}

			var labelType = labelsType.GetNestedType(enumType.Name.Substring(0, enumType.Name.LastIndexOf("Enum")));

			if (labelType == null)
			{
				return "NO_LABEL";
			}

			var field = labelType.GetField(enumMember + "_" + languageCode);

			return field == null ? "NO_LABEL" : field.GetValue(labelType).ToString();
		}

		/// <summary>
		/// Converts an enum constant to an OptionSetValue object..
		/// </summary>
		/// <param name="enumMember">The early-bound enum member constant; e.g.: 'Account.IndustryCode.Accounting'</param>
		/// <returns>The OptionSetValue object.</returns>
		public static OptionSetValue ToOptionSetValue(this Enum enumMember)
		{
			return new OptionSetValue(int.Parse(enumMember.ToString("d")));
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationTypes">An array of validations to run. Default is all.</param>
		/// <returns>A single message containing all validation errors.</returns>
		public static string GetValidationErrorsMessage(this Entity entityRecord, ValidationType[] validationTypes)
		{
			return GetValidationErrorsMessage(entityRecord,
				validationLocationsDefaults.Where(local => validationTypes.Contains(local.ErrorType)).ToArray());
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationLocalisation">
		///     [OPTIONAL] An array containing validation types with the message format to use for the validation error.<br />
		///     For validation type "InRange", the message format takes three params for min, max, and actual value respectively;
		///         e.g.: "Value must be between {0} and {1}. Actual value was {2}.".<br />
		///     For validation type "MaxLength", the message format takes two params;
		///		    e.g.: "Value length must be less than {0}. Actual value was {1}."<br />
		///     Only include ONE localisation language.<br />
		///     Default is a check on all validation types.
		/// </param>
		/// <returns>A single message containing all validation errors.</returns>
		public static string GetValidationErrorsMessage(this Entity entityRecord, ValidationLocalisation[] validationLocalisation = null)
		{
			if (validationLocalisation != null
				&& validationLocalisation.Any(local => local.Localisation.Count > 1))
			{
				throw new ArgumentOutOfRangeException("validationLocalisation",
					"There should only be one validation localisation language for this method.");
			}

			var validationErrorMessages = GetValidationErrorMessages(entityRecord, validationLocalisation);

			if (validationErrorMessages.Any())
			{
				return validationErrorMessages.Aggregate(
					(message1, message2) => message1 + "\r\n-----------------------\r\n" + message2);
			}

			return null;
		}

		private static readonly ValidationLocalisation[] validationLocationsDefaults =
		{
			new ValidationLocalisation
			{
				ErrorType = ValidationType.Required,
				Localisation = new Dictionary<int, string>
				               {
					               {1033, "Value cannot be null."}
				               }
			},
			new ValidationLocalisation
			{
				ErrorType = ValidationType.InRange,
				Localisation = new Dictionary<int, string>
				               {
					               {1033, @"Attribute value must be between ""{0}"" and ""{1}"", inclusive. Actual value was ""{2}""."}
				               }
			},
			new ValidationLocalisation
			{
				ErrorType = ValidationType.MaxLength,
				Localisation = new Dictionary<int, string>
				               {
					               {1033, @"Attribute length must be less than ""{0}"". Actual attribute value was ""{1}""."}
				               }
			}
		};

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationTypes">An array of validations to run.</param>
		/// <returns>A list of messages indicating validation errors.</returns>
		public static List<string> GetValidationErrorMessages(this Entity entityRecord, ValidationType[] validationTypes)
		{
			return GetValidationErrorMessages(entityRecord,
				validationLocationsDefaults.Where(local => validationTypes.Contains(local.ErrorType)).ToArray());
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationLocalisation">
		///     [OPTIONAL] An array containing validation types with the message format to use for the validation error.<br />
		///     For validation type "InRange", the message format takes three params for min, max, and actual value respectively;
		///         e.g.: "Value must be between {0} and {1}. Actual value was {2}.".<br />
		///     For validation type "MaxLength", the message format takes two params;
		///		    e.g.: "Value length must be less than {0}. Actual value was {1}."<br />
		///     Only include ONE localisation language.<br />
		///     Default is a check on all validation types.
		/// </param>
		/// <returns>A list of messages indicating validation errors.</returns>
		public static List<string> GetValidationErrorMessages(this Entity entityRecord, ValidationLocalisation[] validationLocalisation = null)
		{
			if (validationLocalisation != null
			    && validationLocalisation.Any(local => local.Localisation.Count > 1))
			{
				throw new ArgumentOutOfRangeException("validationLocalisation",
					"There should only be one validation localisation language for this method.");
			}

			var validationErrors = GetValidationErrors(entityRecord, validationLocalisation);

			if (validationErrors.Any())
			{
				var messages = validationErrors.Select(error => error.ErrorMessage.Values.First()).ToList();
				var id = ((dynamic)entityRecord).Id;
				messages.Insert(0, string.Format("Record of type \"{0}\"" + (id != null ? " and ID \"{1}\"" : "")
													+ " has invalid values.", entityRecord.GetType().Name, id));
				return messages;
			}

			return null;
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationTypes">An array of validations to run.</param>
		/// <returns>A list of validation errors in the form of <see cref="ValidationError"/>.</returns>
		public static List<ValidationError> GetValidationErrors(this Entity entityRecord, ValidationType[] validationTypes)
		{
			return GetValidationErrors(entityRecord,
				validationLocationsDefaults.Where(local => validationTypes.Contains(local.ErrorType)).ToArray());
		}

		///  <summary>
		///      Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///      Validation checks: required, numeric value range, and string length.<br />
		///  </summary>
		///  <param name="validationLocalisation">
		///      [OPTIONAL] An array containing validation types with the message format to use for the validation error.<br />
		///      For validation type "InRange", the message format takes three params for min, max, and actual value respectively;
		///          e.g.: "Value must be between {0} and {1}. Actual value was {2}.".<br />
		///      For validation type "MaxLength", the message format takes two params;
		/// 		    e.g.: "Value length must be less than {0}. Actual value was {1}."<br />
		///      Default is a check on all validation types.
		///  </param>
		/// <returns>A list of validation errors in the form of <see cref="ValidationError"/>.</returns>
		public static List<ValidationError> GetValidationErrors(this Entity entityRecord, ValidationLocalisation[] validationLocalisation = null)
		{
			var id = ((dynamic) entityRecord).Id;
			var fields = entityRecord.GetType().GetProperties();
			var exceptions = new List<ValidationError>();

			validationLocalisation = validationLocalisation ?? validationLocationsDefaults;

			var localisation = validationLocalisation.FirstOrDefault(local => local.ErrorType == ValidationType.Required);

			if (localisation != null)
			{
				exceptions.AddRange(from fieldQ in fields
				                    where Attribute.IsDefined(fieldQ, typeof (RequiredAttribute))
				                          && fieldQ.GetValue(entityRecord) == null
				                    select new ValidationError
				                           {
					                           RecordId = id,
					                           AttributeName = fieldQ.Name,
					                           ErrorMessage =
						                           localisation.Localisation.ToDictionary(local => local.Key, local => local.Value),
					                           ErrorType = ValidationType.Required
				                           });
			}

			localisation = validationLocalisation.FirstOrDefault(local => local.ErrorType == ValidationType.InRange);

			if (localisation != null)
			{
				foreach (var field in fields.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof (InRangeAttribute)) && fieldQ.GetValue(entityRecord) != null))
				{
					var fieldValue = field.GetValue(entityRecord);
					Type type = field.GetCustomAttribute<InRangeAttribute>().Type;

					var method = type.GetMethods().FirstOrDefault(methodQ => methodQ.GetParameters().Length == 1 && methodQ.Name == "Parse");

					var min = (IComparable) method.Invoke(null, new object[] {field.GetCustomAttribute<InRangeAttribute>().Min});
					var max = (IComparable) method.Invoke(null, new object[] {field.GetCustomAttribute<InRangeAttribute>().Max});

					if (fieldValue != null && (min.CompareTo(fieldValue) == 1 || max.CompareTo(fieldValue) == -1))
					{
						exceptions.Add(new ValidationError
						               {
							               RecordId = id,
							               AttributeName = field.Name,
							               ErrorMessage = localisation.Localisation.ToDictionary(local => local.Key,
									               local => string.Format(local.Value, min, max, fieldValue)),
							               ErrorType = ValidationType.InRange,
							               NumericValue = decimal.Parse(fieldValue.ToString()),
							               NumericRangeMin = decimal.Parse(min.ToString()),
							               NumericRangeMax = decimal.Parse(max.ToString())
						               });
					}
				}
			}


			localisation = validationLocalisation.FirstOrDefault(local => local.ErrorType == ValidationType.MaxLength);

			if (localisation != null)
			{
				exceptions.AddRange(from fieldQ in fields.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof (MaxLengthAttribute)))
				                    let fieldValue = fieldQ.GetValue(entityRecord) as string
				                    let maxLength = fieldQ.GetCustomAttribute<MaxLengthAttribute>().Max
				                    where fieldValue != null && fieldValue.Length > maxLength
				                    select new ValidationError
				                           {
					                           RecordId = id,
					                           AttributeName = fieldQ.Name,
					                           ErrorMessage = localisation.Localisation.ToDictionary(local => local.Key,
							                           local => string.Format(local.Value, maxLength, fieldValue)),
					                           ErrorType = ValidationType.MaxLength,
					                           StringValue = fieldValue,
					                           StringMaxLength = maxLength
				                           });
			}

			return exceptions;
		}

		public static TEntity ConvertTo<TEntity>(this Entity crmRecord) where TEntity : EntityContract
		{
			// create entity object
			var record = Activator.CreateInstance<TEntity>();

			var entityType = typeof(TEntity);
			var entityLogicalName = entityType.GetCustomAttribute<CrmEntityMappingAttribute>().LogicalName;


			// if logical names don't match
			if (entityLogicalName != crmRecord.LogicalName)
			{
				throw new Exception(string.Format("CRM entity '{0}' doesn't map to entity '{1}'.",
					crmRecord.GetType().Name, entityType.Name));
			}

			// go over all fields in the contract entity that has the mapping attribute
			foreach (var field in entityType.GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))
								 && !Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = field.GetCustomAttribute<CrmFieldMappingAttribute>();
				SetValueInRecord(record, field, crmRecord, mapping);
			}

			// go over all relations in the contract entity that has the mapping attribute
			foreach (var relation in typeof(TEntity).GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))
						&& !Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = relation.GetCustomAttribute<CrmRelationMappingAttribute>();
				SetRelationInRecord(record, relation, crmRecord, mapping);
			}

			return record;
		}

		private static void SetValueInRecord<TEntity>(TEntity entity, FieldInfo field, Entity crmRecord,
			CrmFieldMappingAttribute mapping)
			where TEntity : EntityContract
		{
			// if key not found, then the CRM record doesn't have that value set
			if (!crmRecord.Attributes.Contains(mapping.LogicalName))
			{
				return;
			}

			var value = crmRecord[mapping.LogicalName];

			// convert types
			if (value is OptionSetValue)
			{
				// can't set enum value with int using reflection!
				field.SetValue(entity, Enum.ToObject(Nullable.GetUnderlyingType(field.FieldType),
					((OptionSetValue)value).Value));

				var labelsProperty = typeof(TEntity).GetProperties().FirstOrDefault(propQ => propQ.Name == field.Name + "Labels");

                if (labelsProperty != null)
                {
                    // get the label value from the CRM record
                    var matchingProperty = crmRecord.GetType().GetProperties().FirstOrDefault(propQ => propQ.Name == field.Name + "Labels");

                    // if it has a value, set it in contract
                    if (matchingProperty != null)
                    {
                        labelsProperty.SetValue(entity, matchingProperty.GetValue(crmRecord));
                    }
                }
			}
			else if (value is Money)
			{
				field.SetValue(entity, ((Money)value).Value);
			}
			else if (value is EntityReference && field.FieldType != typeof(EntityReference))
			{
				var entityRef = (EntityReference) value;

				field.SetValue(entity, entityRef.Id);

				var nameField = typeof(TEntity).GetFields().FirstOrDefault(fieldQ => fieldQ.Name == field.Name + "Name");

				if (nameField != null && entityRef.Name != null)
				{
					nameField.SetValue(entity, entityRef.Name);
				}

				var labelsProperty = typeof(TEntity).GetProperties().FirstOrDefault(propQ => propQ.Name == field.Name + "Labels");

                if (labelsProperty != null)
                {
                    // get the label value from the CRM record
                    var matchingProperty = crmRecord.GetType().GetProperties().FirstOrDefault(propQ => Attribute.IsDefined(propQ, typeof(LabelAttribute))
                        && propQ.GetCustomAttribute<LabelAttribute>().FieldLogicalName == labelsProperty.GetCustomAttribute<LabelAttribute>().FieldLogicalName);

                    // if it has a value, set it in contract
                    if (matchingProperty != null)
                    {
                        labelsProperty.SetValue(entity, matchingProperty.GetValue(crmRecord));
                    }
                }
			}
			else
			{
				field.SetValue(entity, value);
			}
		}

		private static void SetRelationInRecord<TEntity>(TEntity record, FieldInfo field, Entity crmRecord,
			CrmRelationMappingAttribute mapping)
			where TEntity : EntityContract
		{
			var crmRelations = crmRecord.RelatedEntities
				.Where(relationQ => relationQ.Key.SchemaName == mapping.SchemaName
									&& relationQ.Key.PrimaryEntityRole == mapping.Role);

			// if relation not found in CRM record, exit
			if (!crmRelations.Any())
			{
				return;
			}

			var crmRelatedRecords = crmRelations.First().Value.Entities;

			// if there are not related entities in the CRM relation, exit
			if (!crmRelatedRecords.Any())
			{
				return;
			}

			var fieldType = field.FieldType;

			object convertedValue = null;

			// x-N relation
			if (typeof(Array).IsAssignableFrom(fieldType))
			{
				// get the contract type for the relation
				var elementType = fieldType.GetElementType();

				// create an array for the related entities of the appropriate type
				var relatedRecords = Array.CreateInstance(elementType, crmRelatedRecords.Count);

				// create the method reference that will be used to convert the related entities to the CRM entities
				var method = MethodBase.GetCurrentMethod().DeclaringType
					.GetMethod("ConvertTo").MakeGenericMethod(elementType);

				// convert all entities to contract entities
				var objectRelatedRecords = (from object relatedRecord in crmRelatedRecords
											select method.Invoke(relatedRecord, new[] { relatedRecord })).ToArray();

				// copy the object entities to the array of the specific type
				Array.Copy(objectRelatedRecords, relatedRecords, relatedRecords.Length);
				convertedValue = relatedRecords;
			}
			else if (typeof(EntityContract).IsAssignableFrom(fieldType))
			{
				// N-1 relation
				var relatedRecord = crmRelatedRecords.FirstOrDefault();

				if (relatedRecord != null)
				{
					// go over all fields in the contract entity that has the mapping attribute
					foreach (var fieldT in typeof(TEntity).GetFields()
						.Where(fieldQ => fieldQ.Name.Contains(field.Name)
						&& Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))))
					{
						// get the value of the mapping attribute
						var mappingT = fieldT.GetCustomAttribute<CrmFieldMappingAttribute>();
						SetValueInRecord(record, fieldT, relatedRecord, mappingT);
					}
					// create the method reference that will be used to convert the related entities to the CRM entities
					var method = MethodBase.GetCurrentMethod().DeclaringType
						.GetMethod("ConvertTo").MakeGenericMethod(fieldType);

					convertedValue = method.Invoke(relatedRecord, new object[] { relatedRecord });
				}
			}

			// set the related entities value in the entity
			field.SetValue(record, convertedValue);
		}

		/// <summary>
		/// Returns an array of logical names whose property is marked for WCF contract.
		/// </summary>
		/// <param name="entity"></param>
		/// <returns>An array of logical names.</returns>
		public static string[] GetDataMemberAttributes(this Entity entity)
		{
			return entity.GetType().GetProperties()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(DataMemberAttribute)) && Attribute.IsDefined(fieldQ, typeof(AttributeLogicalNameAttribute)))
				.Select(field => field.GetCustomAttribute<AttributeLogicalNameAttribute>().LogicalName).ToArray();
		}

		/// <summary>
		/// Returns an array of logical names of the properties.
		/// </summary>
		/// <param name="entity"></param>
		/// <returns>An array of logical names.</returns>
		public static string[] GetAttributeNames(this Entity entity)
		{
			return entity.GetType().GetProperties()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(AttributeLogicalNameAttribute)) && !Attribute.IsDefined(fieldQ, typeof(RelationshipSchemaNameAttribute)))
				.Select(field => field.GetCustomAttribute<AttributeLogicalNameAttribute>().LogicalName).ToArray();
		}

		/// <summary>
		/// Loads the values of data member properties from CRM.
		/// </summary>
		/// <param name="entity"></param>
		/// <param name="service">CRM organisation service.</param>
		public static void LoadDataMemberAttributes(this Entity entity, IOrganizationService service)
		{
			LoadAttributeValues(entity, service, entity.GetDataMemberAttributes());
		}

		/// <summary>
		/// Loads the values of all properties from CRM.
		/// </summary>
		/// <param name="entity"></param>
		/// <param name="service">CRM organisation service.</param>
		/// <param name="attributes"></param>
		public static void LoadAttributeValues(this Entity entity, IOrganizationService service, params string[] attributes)
		{
			try
			{
				entity.Id = entity.Id;
			}
			catch
			{
				throw new Exception("Entity is ready only. Set 'MergeOption' to 'NoTracking' in the context used for fetching this entity.");
			}

			var isLoadAll = attributes == null || attributes.Length <= 0;

			if (isLoadAll)
			{
				entity.Attributes.Clear();
			}

			foreach (var attribute in service.Retrieve(entity.LogicalName, entity.Id, new ColumnSet(isLoadAll ? entity.GetAttributeNames() : attributes)).Attributes)
			{
				entity[attribute.Key] = attribute.Value;
			}
		}
	}

	#endregion

	#region Helpers

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public abstract class GeneratedEntityBase : Entity, INotifyPropertyChanging, INotifyPropertyChanged
	{
		public GeneratedEntityBase()
		{}

		public GeneratedEntityBase(string logicalName) : base(logicalName)
		{}

		[DataMember]
		private List<string> NullValuedAttributes { get; set; }
		protected Microsoft.Xrm.Sdk.AttributeCollection backupAttributeCollection;
		protected FormattedValueCollection backupFormattedCollection;
		protected RelatedEntityCollection backupRelatedEntityCollection;
		internal IList<QueryAction> DeferredQueriesList = new List<QueryAction>();
		protected IDictionary<string, object[]> relationProperties;
		protected virtual IDictionary<string, object[]> RelationProperties { get { return new Dictionary<string, object[]>(); } }

		#region Serialisation events

		[OnSerializing]
		private void SerializingInitializer(StreamingContext ctx)
		{
			backupAttributeCollection = new Microsoft.Xrm.Sdk.AttributeCollection();
			backupAttributeCollection.AddRange(Attributes);
			Attributes.Clear();

			backupFormattedCollection = new FormattedValueCollection();
			backupFormattedCollection.AddRange(FormattedValues);
			FormattedValues.Clear();

			backupRelatedEntityCollection = new RelatedEntityCollection();
			backupRelatedEntityCollection.AddRange(RelatedEntities);
			RelatedEntities.Clear();
		}

		[OnSerialized]
		private void SerializedInitializer(StreamingContext ctx)
		{
			Attributes.Clear();
			Attributes.AddRange(backupAttributeCollection);
			backupAttributeCollection = null;

			FormattedValues.Clear();
			FormattedValues.AddRange(backupFormattedCollection);
			backupFormattedCollection = null;

			RelatedEntities.Clear();
			RelatedEntities.AddRange(backupRelatedEntityCollection);
			backupRelatedEntityCollection = null;
		}

		[OnDeserialized]
		private void DeserializedInitializer(StreamingContext ctx)
		{
			LogicalName = (string)GetType().GetField("EntityLogicalName").GetRawConstantValue();
			Attributes.Where(attribute => attribute.Value == null).ToList().ForEach(attribute => Attributes.Remove(attribute.Key));
			if (NullValuedAttributes != null && NullValuedAttributes.Count > 0)
			{
				NullValuedAttributes.ForEach(attribute =>
				{
					var property = GetType().GetProperty(attribute);
					if (property == null)
					{
						throw new Exception("Couldn't find the property '" + attribute + "' in entity.");
					}
					property.SetValue(this, null);
				});
			}
		}

		#endregion

		public XrmServiceContext ServiceContext { get; set; }

		public event PropertyChangedEventHandler PropertyChanged;
		public event PropertyChangingEventHandler PropertyChanging;

		protected void OnPropertyChanged(string propertyName)
		{
			if (PropertyChanged != null)
			{
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		protected void OnPropertyChanging(string propertyName)
		{
			if (PropertyChanging != null)
			{
				PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}

		public void LoadLookupLabels(IOrganizationService service, bool isDeferred = false)
		{
			var properties = from propQ in this.GetType().GetProperties()
			                 let propIdQ = this.GetType().GetProperty(propQ.Name.Replace("Labels", ""))
			                 where Attribute.IsDefined(propQ, typeof(LabelAttribute))
			                       && (Guid?) propIdQ.GetValue(this) != null
			                 select new
			                        {
				                        property = propQ,
				                        id = propIdQ.GetValue(this),
				                        attribute = propQ.GetCustomAttribute<LabelAttribute>()
			                        };

			foreach (var property in properties)
			{
				var fields = property.attribute.LabelFieldNames.Split(',');

				var query = new QueryExpression(property.attribute.LogicalName);
				query.Criteria.AddCondition(property.attribute.IdFieldName, ConditionOperator.Equal, property.id);
				query.ColumnSet = new ColumnSet(fields.Select(field => field.Substring(5)).ToArray());

				var queryAction =
					new QueryAction(query)
					{
						Action =
							result =>
							{
								var response = result as RetrieveMultipleResponse;
								if (response == null) return;

								var entityQ = response.EntityCollection.Entities.FirstOrDefault();
								if (entityQ == null) return;

								var englishLabel = (string) entityQ.Attributes.FirstOrDefault(
									attribute => ("1033_" + attribute.Key) == fields.FirstOrDefault(field => field.Contains("1033_"))).Value;
								var dictionary = new Dictionary<int, string>();
								dictionary[1033] = englishLabel;
								property.property.SetValue(this, dictionary);
							}
					};

				if (isDeferred)
				{
					this.DeferredQueriesList.Add(queryAction);
				}
				else
				{
					queryAction.Action.Invoke(service.Execute(new RetrieveMultipleRequest{Query = query}));
				}
			}
		}

		#region Relationship methods

		protected override IEnumerable<TEntity> GetRelatedEntities<TEntity>(string relationshipSchemaName, EntityRole? primaryEntityRole)
		{
		    var key = new Relationship(relationshipSchemaName) { PrimaryEntityRole = primaryEntityRole };

			var enumerable = base.GetRelatedEntities<TEntity>(relationshipSchemaName, primaryEntityRole);

			if (ServiceContext != null && enumerable == null)
			{
				if (!ServiceContext.IsAttached(this))
				{
					throw new Exception("The context that loaded this entity must be used to load relationships, " +
										"or set 'MergeOption' to anything other than 'NoTracking' in the context before fetching this entity using LINQ.");
				}

				ServiceContext.LoadProperty(this, key);
			}

			enumerable = base.GetRelatedEntities<TEntity>(relationshipSchemaName, primaryEntityRole);
			
			if (enumerable == null)
			{
				if (backupRelatedEntityCollection != null && backupRelatedEntityCollection.Contains(key))
					enumerable = backupRelatedEntityCollection[key].Entities.Cast<TEntity>();
			}

			return enumerable;
		}

		protected override TEntity GetRelatedEntity<TEntity>(string relationshipSchemaName, EntityRole? primaryEntityRole)
		{
			var key = new Relationship(relationshipSchemaName) { PrimaryEntityRole = primaryEntityRole };

			var result = base.GetRelatedEntity<TEntity>(relationshipSchemaName, primaryEntityRole);

			if (ServiceContext != null && result == null)
			{
				if (!ServiceContext.IsAttached(this))
				{
					throw new Exception("The context that loaded this entity must be used to load relationships, " +
										"or set 'MergeOption' to anything other than 'NoTracking' in the context before fetching this entity using LINQ.");
				}

				ServiceContext.LoadProperty(this, key);
			}

			result = base.GetRelatedEntity<TEntity>(relationshipSchemaName, primaryEntityRole);

			if (result == null)
			{
				if (backupRelatedEntityCollection != null && backupRelatedEntityCollection.Contains(key))
					result = (TEntity)backupRelatedEntityCollection[key].Entities.FirstOrDefault();
			}
			
			return result;
		}

		#endregion
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public abstract class GeneratedEntity<TRelationName> : GeneratedEntityBase where TRelationName : RelationNameBase
	{
		public GeneratedEntity()
		{}

		public GeneratedEntity(string logicalName) : base(logicalName)
		{}

		#region Relationship methods

		/// <summary>
		/// Fetch the records related to this entity on this relationship. 
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch.
		/// </summary>
		public void LoadRelation(TRelationName relationName, IOrganizationService service, params string[] attributes)
		{
			LoadRelation(relationName, service, false, -1, -1, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. 
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public void LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, params string[] attributes)
		{
			LoadRelation(relationName, service, isDeferred, -1, -1, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public void LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, FilterExpression filter, params string[] attributes)
		{
			LoadRelation(relationName, service, isDeferred, -1, -1, filter, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public void LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, params string[] attributes)
		{
			LoadRelation(relationName, service, isDeferred, recordCountLimit, -1, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public void LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, int page, params string[] attributes)
		{
			LoadRelation(relationName, service, isDeferred, recordCountLimit, page, null, attributes);
		}
/*
		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public void LoadRelation(LoadRelationParams relationParams)
		{
			LoadRelation(relationParams.RelationName, relationParams.Service, relationParams.IsDeferred, relationParams.RecordCountLimit, relationParams.Page, relationParams.Filter, relationParams.Attributes);
		}
*/
		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public void LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, int page, FilterExpression filter, params string[] attributes)
		{
			if (RelatedEntities.IsReadOnly) {
				throw new Exception("Relationship collection is ready only. The context that loaded this entity from CRM must be passed as a parameter, " +
									"or set 'MergeOption' to 'NoTracking' in the context before fetching this entity using LINQ.");
			}
			if (!RelationProperties.ContainsKey(relationName.Name)) {
				throw new Exception("Relation does not exist in entity, or is not generated.");
			}
			var relationParams = RelationProperties[relationName.Name];
			var queryActionObject = new QueryAction(CrmHelpers.GetLoadRelationQuery(this, service, (string) relationParams[1], (string) relationParams[2], (string) relationParams[3], (string) relationParams[4], (string) relationParams[5], (string) relationParams[6],
					recordCountLimit, page, filter, attributes));
			var queryAction = queryActionObject.Action =
							  resultQ => {
								  var response = resultQ as RetrieveMultipleResponse;
								  var entityType = ((Type) relationParams[8]).GetElementType() ?? (Type) relationParams[8];
					              var resultArray = response == null ? ((List<Entity>) resultQ).Select(entityQ => entityQ.GetType().GetMethod("ToEntity").MakeGenericMethod(entityType).Invoke(entityQ, null)).ToArray()
	    				              : response.EntityCollection.Entities.Select(entityQ => entityQ.GetType().GetMethod("ToEntity").MakeGenericMethod(entityType).Invoke(entityQ, null)).ToArray();
					              var relatedRecords = Array.CreateInstance(entityType, resultArray.Length);
					              Array.Copy(resultArray, relatedRecords, resultArray.Length);
								  DeferredQueriesList.Remove(queryActionObject);
								  var newValue = relatedRecords.Length <= 0 ? null : (((Type) relationParams[8]).GetElementType() == null ? relatedRecords.GetValue(0) : relatedRecords);
								  GetType().GetProperty((string) relationParams[0]).SetValue(this, newValue);
							  };
			if (isDeferred) DeferredQueriesList.Add(queryActionObject);
			else queryAction.Invoke(CrmHelpers.LoadRelation(service, queryActionObject.Query));
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. 
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch.
		/// </summary>
		public void LoadRelation(TRelationName relationName, IOrganizationService service, XrmServiceContext context, params string[] attributes)
		{
			LoadRelation(relationName, service, context, false, -1, -1, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. 
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public void LoadRelation(TRelationName relationName, IOrganizationService service, XrmServiceContext context, bool isDeferred, params string[] attributes)
		{
			LoadRelation(relationName, service, isDeferred, -1, -1, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public void LoadRelation(TRelationName relationName, IOrganizationService service, XrmServiceContext context, bool isDeferred, FilterExpression filter, params string[] attributes)
		{
			LoadRelation(relationName, service, context, isDeferred, -1, -1, filter, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public void LoadRelation(TRelationName relationName, IOrganizationService service, XrmServiceContext context, bool isDeferred, int recordCountLimit, params string[] attributes)
		{
			LoadRelation(relationName, service, context, isDeferred, recordCountLimit, -1, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public void LoadRelation(TRelationName relationName, IOrganizationService service, XrmServiceContext context, bool isDeferred, int recordCountLimit, int page, params string[] attributes)
		{
			LoadRelation(relationName, service, context, isDeferred, recordCountLimit, page, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public void LoadRelation(TRelationName relationName, IOrganizationService service, XrmServiceContext context, bool isDeferred, int recordCountLimit, int page, FilterExpression filter, params string[] attributes)
		{
			if (context.MergeOption == MergeOption.NoTracking) {
				throw new Exception("Set 'MergeOption' to anything other than 'NoTracking' in the context before loading relationships.");
			}
			if (!RelationProperties.ContainsKey(relationName.Name)) {
				throw new Exception("Relation does not exist in entity, or is not generated.");
			}
			var relationParams = RelationProperties[relationName.Name];
			var queryActionObject = new QueryAction(CrmHelpers.GetLoadRelationQuery(this, service, (string) relationParams[1], (string) relationParams[2], (string) relationParams[3], (string) relationParams[4], (string) relationParams[5], (string) relationParams[6],
					recordCountLimit, page, filter, attributes));
			var queryAction = queryActionObject.Action =
							  resultQ => {
								  var response = resultQ as RetrieveMultipleResponse;
								  var entityType = ((Type) relationParams[8]).GetElementType() ?? (Type) relationParams[8];
					              var resultArray = response == null ? ((List<Entity>) resultQ).Select(entityQ => entityQ.GetType().GetMethod("ToEntity").MakeGenericMethod(entityType).Invoke(entityQ, null)).ToArray()
	    				              : response.EntityCollection.Entities.Select(entityQ => entityQ.GetType().GetMethod("ToEntity").MakeGenericMethod(entityType).Invoke(entityQ, null)).ToArray();
					              var relatedRecords = Array.CreateInstance(entityType, resultArray.Length);
					              Array.Copy(resultArray, relatedRecords, resultArray.Length);
								  DeferredQueriesList.Remove(queryActionObject);
								  if (relatedRecords.Length <= 0) return;
								  foreach (Entity entity in relatedRecords) {
								  		var alreadyTracked = context.GetAttachedEntities().FirstOrDefault(attached => attached.Id == entity.Id);
								  		if (alreadyTracked == null) { context.Attach(entity); alreadyTracked = entity; }
								  		try { context.AttachLink(this, new Relationship((string) relationParams[7]), alreadyTracked); } catch { }
								  }
								  var newValue = GetType().GetProperty((string) relationParams[0]).GetValue(this, null);
								  if (newValue == null || (newValue.GetType().IsArray && (newValue as Array).Length != relatedRecords.Length)) {
								  	throw new Exception("Set 'MergeOption' to anything other than 'NoTracking' in the context before loading relationships.");
								  }
							  };
			if (isDeferred) DeferredQueriesList.Add(queryActionObject);
			else queryAction.Invoke(CrmHelpers.LoadRelation(service, queryActionObject.Query));
		}

		#endregion
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public class LoadRelationParams
	{
		public RelationNameBase RelationName;
		public IOrganizationService Service;
		public bool IsDeferred;
		public int RecordCountLimit = -1;
		public int Page = -1;
		public FilterExpression Filter;
		public string[] Attributes;

		public LoadRelationParams(RelationNameBase relationName, IOrganizationService service, params string[] attributes)
		{
			RelationName = relationName;
			Service = service;
			Attributes = attributes;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public abstract class RelationNameBase
	{
		public string Name;

		public RelationNameBase(string name)
		{
			Name = name;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	internal class QueryAction
	{
		public QueryExpression Query { get; set; }
		public Action<object> Action { get; set; }

		public QueryAction(QueryExpression query, Action<object> action = null)
		{
			Query = query;
			Action = action;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Class)]
	public class CrmEntityMappingAttribute : Attribute
	{
		public string LogicalName { get; private set; }
		public string SchemaName { get; private set; }
		public string DisplayName { get; private set; }

		public CrmEntityMappingAttribute(string logicalName, string schemaName, string displayName = null)
		{
			if (string.IsNullOrWhiteSpace(logicalName))
			{
				throw new ArgumentNullException("logicalName");
			}

			if (string.IsNullOrWhiteSpace(schemaName))
			{
				throw new ArgumentNullException("schemaName");
			}

			LogicalName = logicalName;
			SchemaName = schemaName;
			DisplayName = displayName;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field)]
	public class ReadOnlyFieldAttribute : Attribute
	{}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field)]
	public class CrmFieldMappingAttribute : Attribute
	{
		public string LogicalName { get; private set; }
		public string RelatedEntity { get; private set; }

		public CrmFieldMappingAttribute(string logicalName, string relatedEntity = null)
		{
			if (string.IsNullOrWhiteSpace(logicalName))
			{
				throw new ArgumentNullException("logicalName");
			}

			LogicalName = logicalName;
			RelatedEntity = relatedEntity;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field)]
	public class CrmRelationMappingAttribute : Attribute
	{
		public string SchemaName { get; private set; }
		public Type RelatedEntityType { get; private set; }
		public EntityRole? Role { get; private set; }

		public CrmRelationMappingAttribute(string schemaName, Type relatedEntityType)
		{
			if (string.IsNullOrWhiteSpace(schemaName))
			{
				throw new ArgumentNullException("schemaName");
			}

			if (relatedEntityType == null)
			{
				throw new ArgumentNullException("relatedEntityType");
			}

			SchemaName = schemaName;
			RelatedEntityType = relatedEntityType;
		}

		public CrmRelationMappingAttribute(string schemaName, Type relatedEntityType, EntityRole role)
		{
			if (string.IsNullOrWhiteSpace(schemaName))
			{
				throw new ArgumentNullException("schemaName");
			}

			if (relatedEntityType == null)
			{
				throw new ArgumentNullException("relatedEntityType");
			}

			SchemaName = schemaName;
			RelatedEntityType = relatedEntityType;
			Role = role;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)]
	public class InRangeAttribute : Attribute
	{
		public string Min { get; set; }
		public string Max { get; set; }
		public Type Type { get; set; }

		public InRangeAttribute(string min, string max, Type type)
		{
			Min = min;
			Max = max;
			Type = type;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)]
	public class MaxLengthAttribute : Attribute
	{
		public int Max { get; set; }

		public MaxLengthAttribute(int max)
		{
			Max = max;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)]
	public class RequiredAttribute : Attribute
	{
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Property)]
	public class LabelAttribute : Attribute
	{
		public string LabelFieldNames { get; set; }
		public string LogicalName { get; set; }
		public string IdFieldName { get; set; }
		public string FieldLogicalName { get; set; }

		public LabelAttribute(string labelFieldNames, string logicalName, string idFieldName, string fieldLogicalName)
		{
			LabelFieldNames = labelFieldNames;
			LogicalName = logicalName;
			IdFieldName = idFieldName;
			FieldLogicalName = fieldLogicalName;
		}
	}

	public enum ValidationType
	{
		Required,
		InRange,
		MaxLength
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public class OptionsetLanguageLabel
	{
		public int LanguageCode { get; set; }
		public string OptionsetLabel {get; set;}
	}

	public enum ClearMode
	{
		[EnumMember] Disabled,
		[EnumMember] Empty,
		[EnumMember] Convention,
		[EnumMember] Flag
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract]
	public partial class EntityContract
	{
		[DataMember] public virtual ClearMode? ValueClearMode { get { return ClearMode.Disabled; } set{} }

		public TCrmEntity ConvertTo<TCrmEntity>(ClearMode? clearMode = null) where TCrmEntity : Entity
		{
			// create CRM entity object
			var crmRecord = Activator.CreateInstance<TCrmEntity>();

			var entityType = GetType();
			var entityLogicalName = entityType.GetCustomAttribute<CrmEntityMappingAttribute>().LogicalName;

			// if logical names don't match
			if (entityLogicalName != crmRecord.LogicalName)
			{
				throw new Exception(string.Format("Entity '{0}' doesn't map to CRM entity '{1}'.",
					entityType.Name, typeof(TCrmEntity).Name));
			}
            
            clearMode = clearMode ?? (ClearMode?) entityType.GetProperty("ValueClearMode").GetValue(this) ?? ClearMode.Disabled;

			// go over all fields in the contract entity that has the mapping attribute
			foreach (var field in entityType.GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))
								 && !Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = field.GetCustomAttribute<CrmFieldMappingAttribute>();
				// get the value of the field
				var value = field.GetValue(this);
				// is the field value read only
				var isReadOnly = field.GetCustomAttribute<ReadOnlyFieldAttribute>() != null;
                // get the clear flag mode value if it exists
                var isClearFlag = value == null && clearMode == ClearMode.Flag
                    && (bool?)entityType.GetFields().Where(fieldQ => fieldQ.Name == "Clear_" + field.Name)
                    .Select(fieldQ => fieldQ.GetValue(this)).FirstOrDefault() == true;
                // check 'empty' mode
                var isClearEmpty = value == null && clearMode == ClearMode.Empty;

                var isSetValue = (value != null && !isReadOnly) || isClearFlag || isClearEmpty;

                // skip if no value and clear mode does not match and pass check
                if (isReadOnly || !isSetValue)
				{
					continue;
				}

				SetValueInCrmRecord(value, crmRecord, field.Name, mapping, clearMode);
			}

			// go over flattened relations in the contract entity that has the mapping attribute
			foreach (var field in GetType().GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))
					&& Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))))
			{
				// get the value of the field
				var value = field.GetValue(this);
				// is the field value read only
				var isReadOnly = field.GetCustomAttribute<ReadOnlyFieldAttribute>();

				// skip if no value
				if (isReadOnly != null || (value == null && clearMode != ClearMode.Empty) || value is Array)
				{
					continue;
				}

				SetRelationInRecord(value, field);
			}
			// go over all relations in the contract entity that has the mapping attribute
			foreach (var relation in GetType().GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))
					&& !Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = relation.GetCustomAttribute<CrmRelationMappingAttribute>();
				// get the value of the field
				var value = relation.GetValue(this);
				// is the relation read only
				var isReadOnly = relation.GetCustomAttribute<ReadOnlyFieldAttribute>();

				// skip if no value
				if (isReadOnly != null || value == null || (value is Array && ((Array)value).Length <= 0))
				{
					continue;
				}

				SetRelationInCrmRecord(value, crmRecord, mapping, clearMode);
			}

			return crmRecord;
		}

		private void SetRelationInRecord(object value, FieldInfo fieldInfo)
		{
			var fields = GetType().GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof (CrmRelationMappingAttribute))
				                 && !Attribute.IsDefined(fieldQ, typeof (CrmFieldMappingAttribute)));
			// get the field representing the relationship
			var relation = fields.First(fieldQ => fieldQ.Name == fieldInfo.Name.Split('_')[0]);
			// get the related entity type
			var fieldType = relation.FieldType;
			// get the target field in the related entity to set the value
			var field = fieldType.GetFields().First(fieldQ => fieldQ.Name == fieldInfo.Name.Substring(relation.Name.Length + 1));

			// get the relation value
			var record = relation.GetValue(this);

			if (record == null)
			{
				// create a new instance of the related entity if it's null
				record = Activator.CreateInstance(fieldType);
				// save the relation object in this entity
				relation.SetValue(this, record);
			}

			// set the field value in the related record
			field.SetValue(record, value);
		}

		private static void SetValueInCrmRecord<TCrmEntity>(object value, TCrmEntity crmRecord,
			string fieldName, CrmFieldMappingAttribute mapping, ClearMode? clearMode = null)
			where TCrmEntity : Entity
		{
			var crmProperty = GetCrmProperty<TCrmEntity>(mapping);

			// if property not found, then the entities don't map correctly
			if (crmProperty == null)
			{
				throw new Exception(string.Format("Entity doesn't map to CRM entity '{0}'.",
					typeof(TCrmEntity).Name));
			}
            
			// if no value, and clear mode is global, then clear
			if (value == null && clearMode == ClearMode.Empty)
			{
				crmRecord[mapping.LogicalName] = null;
			}
            
			// convert types
			if (value is Enum)
			{
			    // if clear mode is convention, and value fits convention, then clear
				crmRecord[mapping.LogicalName] = (((int) value) == -1 && clearMode == ClearMode.Convention) ? null : new OptionSetValue((int) value);
			}
			else if (value is decimal? && crmProperty.PropertyType == typeof(Money))
			{
				crmRecord[mapping.LogicalName] = (value.Equals(decimal.MinValue) && clearMode == ClearMode.Convention) ? null : new Money(((decimal?) value).Value);
			}
			else if (value is Guid? && fieldName != "Id"
					 && crmProperty.PropertyType != typeof(EntityReference))
			{
				crmProperty.SetValue(crmRecord, (value.Equals(Guid.Empty) && clearMode == ClearMode.Convention) ? null : (Guid?) value);
			}
			else
			{
			    // if clear mode is convention, and value fits convention, then clear
			    if (clearMode == ClearMode.Convention
                    && ((value is DateTime? && value.Equals(new DateTime(1970, 1, 1)))
                        || (value is int? && value.Equals(int.MinValue))
                        || (value is long? && value.Equals(long.MinValue))
                        || (value is decimal? && value.Equals(decimal.MinValue))
                        || (value is double? && value.Equals(double.MinValue))
                        || (value is string && value.Equals(""))))
			    {
				    crmProperty.SetValue(crmRecord, null);
			    }
                else
				{
                    crmProperty.SetValue(crmRecord, value);
                }
			}
		}

		/// <summary>
		///     Gets the property from the CRM entity that corresponds to this field -- same mapping
		/// </summary>
		/// <typeparam name="TCrmEntity">The type of the entity.</typeparam>
		/// <param name="mapping">The mapping.</param>
		/// <returns></returns>
		private static PropertyInfo GetCrmProperty<TCrmEntity>(CrmFieldMappingAttribute mapping)
			where TCrmEntity : Entity
		{
			var crmProperty = typeof(TCrmEntity).GetProperties()
				.FirstOrDefault(propertyQ =>
								{
									var fieldAttribute = propertyQ
										.GetCustomAttributes<AttributeLogicalNameAttribute>(true)
										.FirstOrDefault();

									return fieldAttribute != null
										   && fieldAttribute.LogicalName == mapping.LogicalName;
								});

			return crmProperty;
		}

		private static void SetRelationInCrmRecord<TCrmEntity>(object value, TCrmEntity crmRecord,
			CrmRelationMappingAttribute mapping, ClearMode? clearMode = null)
			where TCrmEntity : Entity
		{
			var crmRelation = GetCrmRelation<TCrmEntity>(mapping);

			// if relation not found, then the entities don't map correctly
			if (crmRelation == null)
			{
				throw new Exception(string.Format("Entity doesn't map to CRM entity '{0}'.",
					typeof(TCrmEntity).Name));
			}

			object convertedValue = null;

			// x-N relation
			if (value is Array)
			{
				var relatedRecords = (Array)value;
				// create an array for the related entities of the appropriate type
				var crmRelatedRecords = Array.CreateInstance(mapping.RelatedEntityType, relatedRecords.Length);

				// create the method reference that will be used to convert the related entities to the CRM entities
				var method = GetConversionMethod(relatedRecords.GetValue(0), mapping.RelatedEntityType);

				// convert all entities to CRM entities
				var objectCrmRelatedRecords = (from object relatedRecord in relatedRecords
											   select method.Invoke(relatedRecord, new object[] { clearMode })).ToArray();

				// copy the object entities to the array of the specific type
				Array.Copy(objectCrmRelatedRecords, crmRelatedRecords, crmRelatedRecords.Length);
				convertedValue = crmRelatedRecords;
			}
			else if (value is EntityContract)
			{
				// N-1 relation
				var method = GetConversionMethod(value, mapping.RelatedEntityType);
				convertedValue = method.Invoke(value, new object[] { clearMode });
			}

			// set the related entities value in the CRM entity
			crmRelation.SetValue(crmRecord, convertedValue);
		}

		private static MethodInfo GetConversionMethod(object entity, Type relatedType)
		{
			return entity.GetType().GetMethod("ConvertTo")
				.MakeGenericMethod(relatedType);
		}

		/// <summary>
		///     Gets the relation from the CRM entity that corresponds to this relation -- same mapping
		/// </summary>
		/// <typeparam name="TCrmEntity">The type of the entity.</typeparam>
		/// <param name="mapping">The mapping.</param>
		/// <returns></returns>
		private static PropertyInfo GetCrmRelation<TCrmEntity>(CrmRelationMappingAttribute mapping)
			where TCrmEntity : Entity
		{
			var crmRelation = typeof(TCrmEntity).GetProperties()
				.FirstOrDefault(propertyQ =>
								{
									var relationAttribute = propertyQ
										.GetCustomAttributes<RelationshipSchemaNameAttribute>(true)
										.FirstOrDefault();

									return relationAttribute != null
										   && relationAttribute.SchemaName == mapping.SchemaName
										   && relationAttribute.PrimaryEntityRole == mapping.Role;
								});

			return crmRelation;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public static partial class CrmHelpers
	{
		#region Enums

		/// <summary>
		/// Get the value that corresponds to the label from the option-set,
		/// using the type of the class enclosing both, label type, and the language code given.
		/// </summary>
		/// <param name="labelType">The type of the class containing the labels; e.g.: 'typeof(Account.Enums.Labels.IndustryCode)'</param>
		/// <param name="label">The label to search for, corresponding to the value</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns>The value corresponding to the label</returns>
		public static int GetValue(Type labelType, string label, int languageCode = 1033)
		{
			var labelsType = labelType.DeclaringType;

			if (labelsType == null)
			{
				return -1;
			}

			var enumsType = labelsType.DeclaringType;

			if (enumsType == null)
			{
				return -1;
			}

			// get the fields with the same label from the label class
			var fields = labelType.GetFields()
				.Where(fieldQ => fieldQ.Name.Contains(languageCode.ToString())
					&& (string)fieldQ.GetValue(labelType) == label);

			if (!fields.Any())
			{
				return -1;
			}

			var field = fields.First();

			var entityType = enumsType.DeclaringType;

			if (entityType == null)
			{
				return -1;
			}

			var enumType = entityType.GetNestedType(labelType.Name + "Enum");

			if (enumType == null)
			{
				return -1;
			}

			// get the enum constant corresponding to the field name
			var enumConstant = Enum.Parse(enumType, field.Name.Replace("_" + languageCode, ""));

			return (int)enumConstant;
		}

		/// <summary>
		/// Gets the value corresponding to the option-set's label using its logical name,
		/// the value within, and the language code.
		/// </summary>
		/// <param name="logicalName">The logical name of the option-set in CRM</param>
		/// <param name="label">The label from the option-set</param>
		/// <param name="enumsType">The 'Enums' type; e.g.: 'typeof(Account.Enums)'</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns>The value corresponding to the label</returns>
		public static int GetValue(string logicalName, string label, Type enumsType, int languageCode = 1033)
		{
			var labelType = GetLabelType(enumsType, logicalName);

			return GetValue(labelType, label, languageCode);
		}

		private static Type GetEnumType(Type enumsType, string logicalName)
		{
			var field = GetLogicalNameField(enumsType, logicalName);

			var entityType = enumsType.DeclaringType;

			if (entityType == null)
			{
				throw new Exception("Can't find the entity type from the enum type.");
			}

			return field == null ? null : entityType.GetNestedType(field.Name + "Enum");
		}

		#endregion

		#region Labels

		/// <summary>
		/// Gets the label corresponding to the option-set's value using its logical name,
		/// the value within, and the language code.
		/// </summary>
		/// <param name="logicalName">The logical name of the option-set in CRM</param>
		/// <param name="constant">The value from the option-set</param>
		/// <param name="enumsType">The 'Enums' type; e.g.: 'typeof(Account.Enums)'</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns></returns>
		public static string GetLabel(string logicalName, int constant, Type enumsType, int languageCode = 1033)
		{
			var enumType = GetEnumType(enumsType, logicalName);

			if (enumType == null)
			{
				return "NO_LABEL";
			}

			var enumName = enumType.Name;
			var constantName = enumType.GetEnumName(constant);
			var labelsType = enumsType.GetNestedType("Labels");

			if (labelsType == null)
			{
				return "NO_LABEL";
			}

			var labelType = labelsType.GetNestedType(enumName.Substring(0, enumType.Name.LastIndexOf("Enum")));

			if (labelType == null)
			{
				return "NO_LABEL";
			}

			var field = labelType.GetField(constantName + "_" + languageCode);

			return field == null ? "NO_LABEL" : field.GetValue(labelType).ToString();
		}

		private static Type GetLabelType(Type enumsType, string logicalName)
		{
			var field = GetLogicalNameField(enumsType, logicalName);
			return enumsType.GetNestedType("Labels").GetNestedType(field.Name);
		}

		#endregion

		private static FieldInfo GetLogicalNameField(Type enumsType, string logicalName)
		{
			var namesType = enumsType.GetNestedType("Names");
			return namesType.GetFields().FirstOrDefault(fieldQ => (string)fieldQ.GetValue(namesType) == logicalName);
		}

		internal static QueryExpression GetLoadRelationQuery(Entity entity, IOrganizationService service,
			string fromEntityName, string toEntityName, string fromFieldName, string toFieldName,
			string idFieldName, string intersectIdFieldName, int limit = -1, int page = -1,
			FilterExpression filter = null, params string[] attributes)
		{
			limit = limit <= 0 ? int.MaxValue : limit;

			// create the query taking into account paging
			var query = new QueryExpression(fromEntityName);
			query.LinkEntities.Add(new LinkEntity(fromEntityName, toEntityName, fromFieldName, toFieldName, JoinOperator.Inner));
			query.LinkEntities[0].EntityAlias = "linkedEntityAlias";
			query.Criteria.AddCondition("linkedEntityAlias", intersectIdFieldName, ConditionOperator.Equal, entity[idFieldName]);

			if (filter != null)
			{
				query.Criteria.AddFilter(filter);
			}

			if (attributes.Length == 1 && attributes[0] == "*")
			{
				query.ColumnSet = new ColumnSet(true);
			}
			else if (attributes.Length > 0)
			{
				query.ColumnSet = new ColumnSet(attributes);
			}
			else
			{
				query.ColumnSet = new ColumnSet(false);
			}

			query.PageInfo = new PagingInfo
			{
				PageNumber = page <= 0 ? 1 : page,
				Count = limit
			};

			return query;
		}

		internal static List<Entity> LoadRelation(Entity entity, IOrganizationService service,
			string fromEntityName, string toEntityName, string fromFieldName, string toFieldName,
			string idFieldName, string intersectIdFieldName, int limit = -1, int page = -1,
			FilterExpression filter = null,params string[] attributes)
		{
			return LoadRelation(service, GetLoadRelationQuery(entity, service, fromEntityName, toEntityName,
				fromFieldName, toFieldName, idFieldName, intersectIdFieldName, limit, page,
				filter, attributes), limit, page);
		}

		public static List<Entity> LoadRelation(IOrganizationService service, QueryExpression query,
			int limit = -1, int page = -1)
		{
			limit = limit <= 0 ? int.MaxValue : limit;

			EntityCollection records;
			var entities = new List<Entity>();

			// get all records
			do
			{
				// fetch the records
				records = service.RetrieveMultiple(query);

				// next time get the next bundle of records
				query.PageInfo.PagingCookie = records.PagingCookie;
				query.PageInfo.PageNumber++;

				// add to existing list
				entities.AddRange(records.Entities);
			} while (records.MoreRecords && entities.Count < limit && page <= 0);

			return entities.ToList();
		}

		/// <summary>
		/// Executes the queries in the query queue in each entity passed, and executes the action related to the query after.<br />
		/// Returns a list of errors per entity processed.
		/// </summary>
		/// <param name="service">CRM service to use to execute query.</param>
		/// <param name="entities">List of entities containing the queues.</param>
		public static IDictionary<GeneratedEntityBase, IList<string>> ProcessDeferredQueries(IOrganizationService service,
			params GeneratedEntityBase[] entities)
		{
            return ProcessDeferredQueries(service, 100, entities);
        }

		/// <summary>
		/// Executes the queries in the query queue in each entity passed, and executes the action related to the query after.<br />
		/// Returns a list of errors per entity processed.
		/// </summary>
		/// <param name="service">CRM service to use to execute query.</param>
		/// <param name="bulkSize">The number of requests from the queue to execute in each iteration.</param>
		/// <param name="entities">List of entities containing the queues.</param>
		internal static IDictionary<GeneratedEntityBase, IList<string>> ProcessDeferredQueries(IOrganizationService service,
			int bulkSize, params GeneratedEntityBase[] entities)
		{
			var errorList = new Dictionary<GeneratedEntityBase, IList<string>>();

			// exit if no entities to process
			if (!entities.Any()) return errorList;
            
            bulkSize = Math.Min(1000, bulkSize);

			// filter entities to only the ones with a queue
			entities = entities.Where(entity => entity.DeferredQueriesList.Any()).ToArray();

			// queue to assign errors to proper entity and to find the original query and invoke the action
			var queryActionQueue = new Queue<KeyValuePair<GeneratedEntityBase, QueryAction>>();

			// create a queue to support paging in bulk execution
			var requestsQueue = new Queue<OrganizationRequest>();

			// go over the entities and fill the queues
			foreach (var entity in entities)
			{
				foreach (var queryAction in entity.DeferredQueriesList)
				{
					queryActionQueue.Enqueue(new KeyValuePair<GeneratedEntityBase, QueryAction>(entity, queryAction));
					requestsQueue.Enqueue(new RetrieveMultipleRequest {Query = queryAction.Query});
				}
			}

			var bulkQuery = new ExecuteMultipleRequest
			{
				Settings = new ExecuteMultipleSettings
				{
					ContinueOnError = true,
					ReturnResponses = true
				},
				Requests = new OrganizationRequestCollection()
			};

			while (requestsQueue.Any())
			{
				bulkQuery.Requests.Clear();

				// page execution
				do
				{
					bulkQuery.Requests.Add(requestsQueue.Dequeue());
				} while (bulkQuery.Requests.Count % bulkSize != 0 && requestsQueue.Any());

				var result = (ExecuteMultipleResponse) service.Execute(bulkQuery);

				foreach (var response in result.Responses)
				{
					var queryAction = queryActionQueue.Dequeue();
					var entity = queryAction.Key;

					// parse fault
					if (response.Fault != null)
					{
						if (!errorList.ContainsKey(entity))
						{
							errorList.Add(entity, new List<string>());
						}

						errorList[entity].Add(string.Format("Error code: {0}.\nError message: {1}.",
							response.Fault.ErrorCode, response.Fault.Message)
													 + (!string.IsNullOrEmpty(response.Fault.TraceText)
															? "\nError trace: " + response.Fault.TraceText
															: ""));

						continue;
					}

					queryAction.Value.Action.Invoke(response.Response);
				}
			}

			return errorList;
		}
	}

    public class EntityComparer : IEqualityComparer<Entity>
    {
        public bool Equals(Entity x, Entity y)
        {
            return x.Id == y.Id;
        }

        public int GetHashCode(Entity obj)
        {
            return obj.Id.GetHashCode();
        }
    }

	#endregion

	#region Actions

	#endregion

	#region Known Types

	#endregion

	#region Entities

	#region ActivityParty

	/// <summary>
	/// 'ActivityParty'.<br />
	/// Person or group associated with an activity. An activity can have multiple activity parties.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("activityparty")]
	public partial class ActivityParty : GeneratedEntity<ActivityParty.RelationName>
	{
		
		public ActivityParty() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Activity Party";
		public const string SchemaName = "ActivityParty";
		public const string EntityLogicalName = "activityparty";
		public const int EntityTypeCode = 135;
		
		#region Attributes

		[AttributeLogicalName("activitypartyid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (ActivityPartyId == null || ActivityPartyId == Guid.Empty) ? base.Id : ActivityPartyId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("activitypartyid");
                    base.Id = value;
                } else {
				    ActivityPartyId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'ActivityId'.<br />
        /// Unique identifier of the activity associated with the activity party. (A "party" is any person who is associated with an activity.)
        /// </summary>
		[AttributeLogicalName("activityid")]
		public Guid? Activity
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("activityid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("activityid"))
				    value = (EntityReference) backupAttributeCollection["activityid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Activity");
                if (value != null)
				    SetAttributeValue("activityid", new EntityReference("activitypointer", value.Value));
                else
					SetAttributeValue("activityid", value);
				OnPropertyChanged("Activity");
			}
		}

        public string ActivityName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("activityid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("activityid"))
				    value = (EntityReference) backupAttributeCollection["activityid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ActivityPartyId'.<br />
        /// Unique identifier of the activity party.
        /// </summary>
		[AttributeLogicalName("activitypartyid")]
		public Guid? ActivityPartyId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("activitypartyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("activitypartyid"))
				    value = (Guid?) backupAttributeCollection["activitypartyid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ActivityPartyId");
                if (value != null)
					SetAttributeValue("activitypartyid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("ActivityPartyId");
			}
		}

        /// <summary>
        /// [MaximumLength=200] 
		/// 'AddressUsed'.<br />
        /// Email address to which an email is delivered, and which is associated with the target entity.
        /// </summary>
		[AttributeLogicalName("addressused"), MaxLength(200)]
		public string Address
		{
			get
			{
				var value = GetAttributeValue<string>("addressused");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("addressused"))
				    value = (string) backupAttributeCollection["addressused"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address");
					SetAttributeValue("addressused", value);
				OnPropertyChanged("Address");
			}
		}

        /// <summary>
        /// [Range(1, 2147483647)] 
		/// 'AddressUsedEmailColumnNumber'.<br />
        /// Email address column number from associated party.
        /// </summary>
		[AttributeLogicalName("addressusedemailcolumnnumber"), InRange("1", "2147483647", typeof(int))]
		public int? Emailcolumnnumberofparty
		{
			get
			{
				var value = GetAttributeValue<int?>("addressusedemailcolumnnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("addressusedemailcolumnnumber"))
				    value = (int?) backupAttributeCollection["addressusedemailcolumnnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Emailcolumnnumberofparty");
					SetAttributeValue("addressusedemailcolumnnumber", value);
				OnPropertyChanged("Emailcolumnnumberofparty");
			}
		}

        /// <summary>
        ///  
		/// 'DoNotEmail'.<br />
        /// Information about whether to allow sending email to the activity party.
        /// </summary>
		[AttributeLogicalName("donotemail")]
		public bool? DonotallowEmails
		{
			get
			{
				var value = GetAttributeValue<bool?>("donotemail");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("donotemail"))
				    value = (bool?) backupAttributeCollection["donotemail"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DonotallowEmails");
					SetAttributeValue("donotemail", value);
				OnPropertyChanged("DonotallowEmails");
			}
		}

        /// <summary>
        ///  
		/// 'DoNotFax'.<br />
        /// Information about whether to allow sending faxes to the activity party.
        /// </summary>
		[AttributeLogicalName("donotfax")]
		public bool? DonotallowFaxes
		{
			get
			{
				var value = GetAttributeValue<bool?>("donotfax");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("donotfax"))
				    value = (bool?) backupAttributeCollection["donotfax"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DonotallowFaxes");
					SetAttributeValue("donotfax", value);
				OnPropertyChanged("DonotallowFaxes");
			}
		}

        /// <summary>
        ///  
		/// 'DoNotPhone'.<br />
        /// Information about whether to allow phone calls to the lead.
        /// </summary>
		[AttributeLogicalName("donotphone")]
		public bool? DonotallowPhoneCalls
		{
			get
			{
				var value = GetAttributeValue<bool?>("donotphone");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("donotphone"))
				    value = (bool?) backupAttributeCollection["donotphone"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DonotallowPhoneCalls");
					SetAttributeValue("donotphone", value);
				OnPropertyChanged("DonotallowPhoneCalls");
			}
		}

        /// <summary>
        ///  
		/// 'DoNotPostalMail'.<br />
        /// Information about whether to allow sending postal mail to the lead.
        /// </summary>
		[AttributeLogicalName("donotpostalmail")]
		public bool? DonotallowPostalMails
		{
			get
			{
				var value = GetAttributeValue<bool?>("donotpostalmail");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("donotpostalmail"))
				    value = (bool?) backupAttributeCollection["donotpostalmail"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DonotallowPostalMails");
					SetAttributeValue("donotpostalmail", value);
				OnPropertyChanged("DonotallowPostalMails");
			}
		}

        /// <summary>
        /// [Range(0, 1000000000)] 
		/// 'Effort'.<br />
        /// Amount of effort used by the resource in a service appointment activity.
        /// </summary>
		[AttributeLogicalName("effort"), InRange("0", "1000000000", typeof(double))]
		public double? Effort
		{
			get
			{
				var value = GetAttributeValue<double?>("effort");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("effort"))
				    value = (double?) backupAttributeCollection["effort"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Effort");
					SetAttributeValue("effort", value);
				OnPropertyChanged("Effort");
			}
		}

        /// <summary>
        /// [MaximumLength=1024] 
		/// 'ExchangeEntryId'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("exchangeentryid"), MaxLength(1024)]
		public string ExchangeEntry
		{
			get
			{
				var value = GetAttributeValue<string>("exchangeentryid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("exchangeentryid"))
				    value = (string) backupAttributeCollection["exchangeentryid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExchangeEntry");
					SetAttributeValue("exchangeentryid", value);
				OnPropertyChanged("ExchangeEntry");
			}
		}

        /// <summary>
        ///  
		/// 'InstanceTypeCode'.<br />
        /// Type of instance of a recurring series.
        /// </summary>
		[AttributeLogicalName("instancetypecode")]
		public AppointmentTypeEnum? AppointmentType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("instancetypecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("instancetypecode"))
				    value = (OptionSetValue) backupAttributeCollection["instancetypecode"];
                return value == null ? (AppointmentTypeEnum?) null : (AppointmentTypeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("AppointmentType");
                if (value != null)
				    SetAttributeValue("instancetypecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("instancetypecode", value);
				OnPropertyChanged("AppointmentType");
			}
		}

        /// <summary>
        ///  
		/// 'IsPartyDeleted'.<br />
        /// Information about whether the underlying entity record is deleted.
        /// </summary>
		[AttributeLogicalName("ispartydeleted")]
		public bool? IsPartyDeleted
		{
			get
			{
				var value = GetAttributeValue<bool?>("ispartydeleted");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ispartydeleted"))
				    value = (bool?) backupAttributeCollection["ispartydeleted"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsPartyDeleted");
					SetAttributeValue("ispartydeleted", value);
				OnPropertyChanged("IsPartyDeleted");
			}
		}

        /// <summary>
        /// [Required] 
		/// 'OwnerId'.<br />
        /// Unique identifier of the user or team who owns the activity_party.
        /// </summary>
		[AttributeLogicalName("ownerid"), Required]
		public EntityReference Owner
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Owner");
					SetAttributeValue("ownerid", value);
				OnPropertyChanged("Owner");
			}
		}

        public string OwnerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ParticipationTypeMask'.<br />
        /// Role of the person in the activity, such as sender, to, cc, bcc, required, optional, organizer, regarding, or owner.
        /// </summary>
		[AttributeLogicalName("participationtypemask")]
		public ParticipationTypeEnum? ParticipationType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("participationtypemask");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("participationtypemask"))
				    value = (OptionSetValue) backupAttributeCollection["participationtypemask"];
                return value == null ? (ParticipationTypeEnum?) null : (ParticipationTypeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("ParticipationType");
                if (value != null)
				    SetAttributeValue("participationtypemask", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("participationtypemask", value);
				OnPropertyChanged("ParticipationType");
			}
		}

        /// <summary>
        ///  
		/// 'PartyId'.<br />
        /// Unique identifier of the party associated with the activity.
        /// </summary>
		[AttributeLogicalName("partyid")]
		public EntityReference Party
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("partyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("partyid"))
				    value = (EntityReference) backupAttributeCollection["partyid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Party");
					SetAttributeValue("partyid", value);
				OnPropertyChanged("Party");
			}
		}

        public string PartyName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("partyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("partyid"))
				    value = (EntityReference) backupAttributeCollection["partyid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ResourceSpecId'.<br />
        /// Unique identifier of the resource specification for the activity party.
        /// </summary>
		[AttributeLogicalName("resourcespecid")]
		public Guid? ResourceSpecification
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("resourcespecid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("resourcespecid"))
				    value = (EntityReference) backupAttributeCollection["resourcespecid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ResourceSpecification");
                if (value != null)
				    SetAttributeValue("resourcespecid", new EntityReference("resourcespec", value.Value));
                else
					SetAttributeValue("resourcespecid", value);
				OnPropertyChanged("ResourceSpecification");
			}
		}

        public string ResourceSpecificationName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("resourcespecid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("resourcespecid"))
				    value = (EntityReference) backupAttributeCollection["resourcespecid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ScheduledEnd'.<br />
        /// Scheduled end time of the activity.
        /// </summary>
		[AttributeLogicalName("scheduledend")]
		public DateTime? ScheduledEnd
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("scheduledend");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("scheduledend"))
				    value = (DateTime?) backupAttributeCollection["scheduledend"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ScheduledEnd");
					SetAttributeValue("scheduledend", value);
				OnPropertyChanged("ScheduledEnd");
			}
		}

        /// <summary>
        ///  
		/// 'ScheduledStart'.<br />
        /// Scheduled start time of the activity.
        /// </summary>
		[AttributeLogicalName("scheduledstart")]
		public DateTime? ScheduledStart
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("scheduledstart");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("scheduledstart"))
				    value = (DateTime?) backupAttributeCollection["scheduledstart"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ScheduledStart");
					SetAttributeValue("scheduledstart", value);
				OnPropertyChanged("ScheduledStart");
			}
		}

		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		
		public static class RelationNames {
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public ActivityParty(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["activitypartyid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		#region DonotallowEmails

		public enum DonotallowEmailsEnum
		{
			[EnumMember]DoNotAllow = 1,
			[EnumMember]Allow = 0,
		}

		#endregion
	
		#region DonotallowFaxes

		public enum DonotallowFaxesEnum
		{
			[EnumMember]DoNotAllow = 1,
			[EnumMember]Allow = 0,
		}

		#endregion
	
		#region DonotallowPhoneCalls

		public enum DonotallowPhoneCallsEnum
		{
			[EnumMember]DoNotAllow = 1,
			[EnumMember]Allow = 0,
		}

		#endregion
	
		#region DonotallowPostalMails

		public enum DonotallowPostalMailsEnum
		{
			[EnumMember]DoNotAllow = 1,
			[EnumMember]Allow = 0,
		}

		#endregion
	
		#region AppointmentType

		public enum AppointmentTypeEnum
		{
			[EnumMember]NotRecurring = 0,
			[EnumMember]RecurringMaster = 1,
			[EnumMember]RecurringInstance = 2,
			[EnumMember]RecurringException = 3,
			[EnumMember]RecurringFutureException = 4,
		}

		#endregion
	
		#region IsPartyDeleted

		public enum IsPartyDeletedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region ParticipationType

		public enum ParticipationTypeEnum
		{
			[EnumMember]Sender = 1,
			[EnumMember]ToRecipient = 2,
			[EnumMember]CCRecipient = 3,
			[EnumMember]BCCRecipient = 4,
			[EnumMember]Requiredattendee = 5,
			[EnumMember]Optionalattendee = 6,
			[EnumMember]Organizer = 7,
			[EnumMember]Regarding = 8,
			[EnumMember]Owner = 9,
			[EnumMember]Resource = 10,
			[EnumMember]Customer = 11,
		}

		#endregion
	
		#endregion

		#region Metadata

		#endregion
	}

	#endregion

	#region ldv_ldv_customjob_ldv_recurrencerule

	/// <summary>
	/// 'ldv_ldv_customjob_ldv_recurrencerule'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("ldv_ldv_customjob_ldv_recurrencerule")]
	public partial class ldv_ldv_customjob_ldv_recurrencerule : GeneratedEntity<ldv_ldv_customjob_ldv_recurrencerule.RelationName>
	{
		
		public ldv_ldv_customjob_ldv_recurrencerule() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = null;
		public const string SchemaName = "ldv_ldv_customjob_ldv_recurrencerule";
		public const string EntityLogicalName = "ldv_ldv_customjob_ldv_recurrencerule";
		public const int EntityTypeCode = 10019;
		
		#region Attributes

		[AttributeLogicalName("ldv_ldv_customjob_ldv_recurrenceruleid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (ldv_ldv_customjob_ldv_recurrenceruleIdId == null || ldv_ldv_customjob_ldv_recurrenceruleIdId == Guid.Empty) ? base.Id : ldv_ldv_customjob_ldv_recurrenceruleIdId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("ldv_ldv_customjob_ldv_recurrenceruleid");
                    base.Id = value;
                } else {
				    ldv_ldv_customjob_ldv_recurrenceruleIdId = value;
                }
			}
		}

		[AttributeLogicalName("ldv_customjobid")]
		public Guid? ldv_customjobid
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_customjobid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_customjobid"))
				    value = (Guid?) backupAttributeCollection["ldv_customjobid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ldv_customjobid");
					SetAttributeValue("ldv_customjobid", value);
				OnPropertyChanged("ldv_customjobid");
			}
		}

		[AttributeLogicalName("ldv_ldv_customjob_ldv_recurrenceruleid")]
		public Guid? ldv_ldv_customjob_ldv_recurrenceruleIdId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_ldv_customjob_ldv_recurrenceruleid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_ldv_customjob_ldv_recurrenceruleid"))
				    value = (Guid?) backupAttributeCollection["ldv_ldv_customjob_ldv_recurrenceruleid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ldv_ldv_customjob_ldv_recurrenceruleIdId");
                if (value != null)
					SetAttributeValue("ldv_ldv_customjob_ldv_recurrenceruleid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("ldv_ldv_customjob_ldv_recurrenceruleIdId");
			}
		}

		[AttributeLogicalName("ldv_recurrenceruleid")]
		public Guid? ldv_recurrenceruleid
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_recurrenceruleid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_recurrenceruleid"))
				    value = (Guid?) backupAttributeCollection["ldv_recurrenceruleid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ldv_recurrenceruleid");
					SetAttributeValue("ldv_recurrenceruleid", value);
				OnPropertyChanged("ldv_recurrenceruleid");
			}
		}

		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		
		public static class RelationNames {
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public ldv_ldv_customjob_ldv_recurrencerule(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		#endregion

		#region Metadata

		#endregion
	}

	#endregion

	#region ldv_ldv_recurrencerule_ldv_recurrenceexgrou

	/// <summary>
	/// 'ldv_ldv_recurrencerule_ldv_recurrenceexgrou'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("ldv_ldv_recurrencerule_ldv_recurrenceexgrou")]
	public partial class ldv_ldv_recurrencerule_ldv_recurrenceexgrou : GeneratedEntity<ldv_ldv_recurrencerule_ldv_recurrenceexgrou.RelationName>
	{
		
		public ldv_ldv_recurrencerule_ldv_recurrenceexgrou() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = null;
		public const string SchemaName = "ldv_ldv_recurrencerule_ldv_recurrenceexgrou";
		public const string EntityLogicalName = "ldv_ldv_recurrencerule_ldv_recurrenceexgrou";
		public const int EntityTypeCode = 10017;
		
		#region Attributes

		[AttributeLogicalName("ldv_ldv_recurrencerule_ldv_recurrenceexgrouid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (ldv_ldv_recurrencerule_ldv_recurrenceexgrouIdId == null || ldv_ldv_recurrencerule_ldv_recurrenceexgrouIdId == Guid.Empty) ? base.Id : ldv_ldv_recurrencerule_ldv_recurrenceexgrouIdId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("ldv_ldv_recurrencerule_ldv_recurrenceexgrouid");
                    base.Id = value;
                } else {
				    ldv_ldv_recurrencerule_ldv_recurrenceexgrouIdId = value;
                }
			}
		}

		[AttributeLogicalName("ldv_ldv_recurrencerule_ldv_recurrenceexgrouid")]
		public Guid? ldv_ldv_recurrencerule_ldv_recurrenceexgrouIdId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_ldv_recurrencerule_ldv_recurrenceexgrouid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_ldv_recurrencerule_ldv_recurrenceexgrouid"))
				    value = (Guid?) backupAttributeCollection["ldv_ldv_recurrencerule_ldv_recurrenceexgrouid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ldv_ldv_recurrencerule_ldv_recurrenceexgrouIdId");
                if (value != null)
					SetAttributeValue("ldv_ldv_recurrencerule_ldv_recurrenceexgrouid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("ldv_ldv_recurrencerule_ldv_recurrenceexgrouIdId");
			}
		}

		[AttributeLogicalName("ldv_recurrenceruleexceptiongroupingid")]
		public Guid? ldv_recurrenceruleexceptiongroupingid
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_recurrenceruleexceptiongroupingid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_recurrenceruleexceptiongroupingid"))
				    value = (Guid?) backupAttributeCollection["ldv_recurrenceruleexceptiongroupingid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ldv_recurrenceruleexceptiongroupingid");
					SetAttributeValue("ldv_recurrenceruleexceptiongroupingid", value);
				OnPropertyChanged("ldv_recurrenceruleexceptiongroupingid");
			}
		}

		[AttributeLogicalName("ldv_recurrenceruleid")]
		public Guid? ldv_recurrenceruleid
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_recurrenceruleid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_recurrenceruleid"))
				    value = (Guid?) backupAttributeCollection["ldv_recurrenceruleid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ldv_recurrenceruleid");
					SetAttributeValue("ldv_recurrenceruleid", value);
				OnPropertyChanged("ldv_recurrenceruleid");
			}
		}

		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		
		/// <summary>
		/// N:N, 'ldv_ldv_recurrencerule_ldv_recurrenceexgroup'
		/// </summary>
		[RelationshipSchemaName("ldv_ldv_recurrencerule_ldv_recurrenceexgroup")]
		public RecurrenceRule[] RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceexgroup

		{
			get
			{
				var enumerable = GetRelatedEntities<RecurrenceRule>("ldv_ldv_recurrencerule_ldv_recurrenceexgroup", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceexgroup");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<RecurrenceRule>("ldv_ldv_recurrencerule_ldv_recurrenceexgroup", null, value);
				OnPropertyChanged("RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceexgroup");
			}
		}
		
		public static class RelationNames {
			public static RelationName RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceexgroup = new RelationName("RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceexgroup");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceexgroup"] = new object[] { "RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceexgroup", "ldv_recurrencerule", "ldv_ldv_recurrencerule_ldv_recurrenceexgrou", "ldv_recurrenceruleid", "ldv_recurrenceruleid", "ldv_ldv_recurrencerule_ldv_recurrenceexgrouid", "ldv_recurrenceruleexceptiongroupingid", "ldv_ldv_recurrencerule_ldv_recurrenceexgroup", typeof (RecurrenceRule[]) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public ldv_ldv_recurrencerule_ldv_recurrenceexgrou(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		#endregion

		#region Metadata

		#endregion
	}

	#endregion

	#region ldv_ldv_recurrencerule_ldv_recurrenceruleex

	/// <summary>
	/// 'ldv_ldv_recurrencerule_ldv_recurrenceruleex'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("ldv_ldv_recurrencerule_ldv_recurrenceruleex")]
	public partial class ldv_ldv_recurrencerule_ldv_recurrenceruleex : GeneratedEntity<ldv_ldv_recurrencerule_ldv_recurrenceruleex.RelationName>
	{
		
		public ldv_ldv_recurrencerule_ldv_recurrenceruleex() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = null;
		public const string SchemaName = "ldv_ldv_recurrencerule_ldv_recurrenceruleex";
		public const string EntityLogicalName = "ldv_ldv_recurrencerule_ldv_recurrenceruleex";
		public const int EntityTypeCode = 10014;
		
		#region Attributes

		[AttributeLogicalName("ldv_ldv_recurrencerule_ldv_recurrenceruleexid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (ldv_ldv_recurrencerule_ldv_recurrenceruleexIdId == null || ldv_ldv_recurrencerule_ldv_recurrenceruleexIdId == Guid.Empty) ? base.Id : ldv_ldv_recurrencerule_ldv_recurrenceruleexIdId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("ldv_ldv_recurrencerule_ldv_recurrenceruleexid");
                    base.Id = value;
                } else {
				    ldv_ldv_recurrencerule_ldv_recurrenceruleexIdId = value;
                }
			}
		}

		[AttributeLogicalName("ldv_ldv_recurrencerule_ldv_recurrenceruleexid")]
		public Guid? ldv_ldv_recurrencerule_ldv_recurrenceruleexIdId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_ldv_recurrencerule_ldv_recurrenceruleexid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_ldv_recurrencerule_ldv_recurrenceruleexid"))
				    value = (Guid?) backupAttributeCollection["ldv_ldv_recurrencerule_ldv_recurrenceruleexid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ldv_ldv_recurrencerule_ldv_recurrenceruleexIdId");
                if (value != null)
					SetAttributeValue("ldv_ldv_recurrencerule_ldv_recurrenceruleexid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("ldv_ldv_recurrencerule_ldv_recurrenceruleexIdId");
			}
		}

		[AttributeLogicalName("ldv_recurrenceruleexceptionid")]
		public Guid? ldv_recurrenceruleexceptionid
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_recurrenceruleexceptionid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_recurrenceruleexceptionid"))
				    value = (Guid?) backupAttributeCollection["ldv_recurrenceruleexceptionid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ldv_recurrenceruleexceptionid");
					SetAttributeValue("ldv_recurrenceruleexceptionid", value);
				OnPropertyChanged("ldv_recurrenceruleexceptionid");
			}
		}

		[AttributeLogicalName("ldv_recurrenceruleid")]
		public Guid? ldv_recurrenceruleid
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_recurrenceruleid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_recurrenceruleid"))
				    value = (Guid?) backupAttributeCollection["ldv_recurrenceruleid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ldv_recurrenceruleid");
					SetAttributeValue("ldv_recurrenceruleid", value);
				OnPropertyChanged("ldv_recurrenceruleid");
			}
		}

		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		
		/// <summary>
		/// N:N, 'ldv_ldv_recurrencerule_ldv_recurrenceruleexce'
		/// </summary>
		[RelationshipSchemaName("ldv_ldv_recurrencerule_ldv_recurrenceruleexce")]
		public RecurrenceRule[] RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceruleexce

		{
			get
			{
				var enumerable = GetRelatedEntities<RecurrenceRule>("ldv_ldv_recurrencerule_ldv_recurrenceruleexce", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceruleexce");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<RecurrenceRule>("ldv_ldv_recurrencerule_ldv_recurrenceruleexce", null, value);
				OnPropertyChanged("RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceruleexce");
			}
		}
		
		public static class RelationNames {
			public static RelationName RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceruleexce = new RelationName("RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceruleexce");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceruleexce"] = new object[] { "RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceruleexce", "ldv_recurrencerule", "ldv_ldv_recurrencerule_ldv_recurrenceruleex", "ldv_recurrenceruleid", "ldv_recurrenceruleid", "ldv_ldv_recurrencerule_ldv_recurrenceruleexid", "ldv_recurrenceruleexceptionid", "ldv_ldv_recurrencerule_ldv_recurrenceruleexce", typeof (RecurrenceRule[]) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public ldv_ldv_recurrencerule_ldv_recurrenceruleex(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		#endregion

		#region Metadata

		#endregion
	}

	#endregion

	#region ldv_ldv_recurrenceruleexceptiongrouping_ldv

	/// <summary>
	/// 'ldv_ldv_recurrenceruleexceptiongrouping_ldv'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("ldv_ldv_recurrenceruleexceptiongrouping_ldv")]
	public partial class ldv_ldv_recurrenceruleexceptiongrouping_ldv : GeneratedEntity<ldv_ldv_recurrenceruleexceptiongrouping_ldv.RelationName>
	{
		
		public ldv_ldv_recurrenceruleexceptiongrouping_ldv() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = null;
		public const string SchemaName = "ldv_ldv_recurrenceruleexceptiongrouping_ldv";
		public const string EntityLogicalName = "ldv_ldv_recurrenceruleexceptiongrouping_ldv";
		public const int EntityTypeCode = 10016;
		
		#region Attributes

		[AttributeLogicalName("ldv_ldv_recurrenceruleexceptiongrouping_ldvid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (ldv_ldv_recurrenceruleexceptiongrouping_ldvIdId == null || ldv_ldv_recurrenceruleexceptiongrouping_ldvIdId == Guid.Empty) ? base.Id : ldv_ldv_recurrenceruleexceptiongrouping_ldvIdId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("ldv_ldv_recurrenceruleexceptiongrouping_ldvid");
                    base.Id = value;
                } else {
				    ldv_ldv_recurrenceruleexceptiongrouping_ldvIdId = value;
                }
			}
		}

		[AttributeLogicalName("ldv_ldv_recurrenceruleexceptiongrouping_ldvid")]
		public Guid? ldv_ldv_recurrenceruleexceptiongrouping_ldvIdId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_ldv_recurrenceruleexceptiongrouping_ldvid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_ldv_recurrenceruleexceptiongrouping_ldvid"))
				    value = (Guid?) backupAttributeCollection["ldv_ldv_recurrenceruleexceptiongrouping_ldvid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ldv_ldv_recurrenceruleexceptiongrouping_ldvIdId");
                if (value != null)
					SetAttributeValue("ldv_ldv_recurrenceruleexceptiongrouping_ldvid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("ldv_ldv_recurrenceruleexceptiongrouping_ldvIdId");
			}
		}

		[AttributeLogicalName("ldv_recurrenceruleexceptiongroupingid")]
		public Guid? ldv_recurrenceruleexceptiongroupingid
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_recurrenceruleexceptiongroupingid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_recurrenceruleexceptiongroupingid"))
				    value = (Guid?) backupAttributeCollection["ldv_recurrenceruleexceptiongroupingid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ldv_recurrenceruleexceptiongroupingid");
					SetAttributeValue("ldv_recurrenceruleexceptiongroupingid", value);
				OnPropertyChanged("ldv_recurrenceruleexceptiongroupingid");
			}
		}

		[AttributeLogicalName("ldv_recurrenceruleexceptionid")]
		public Guid? ldv_recurrenceruleexceptionid
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_recurrenceruleexceptionid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_recurrenceruleexceptionid"))
				    value = (Guid?) backupAttributeCollection["ldv_recurrenceruleexceptionid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ldv_recurrenceruleexceptionid");
					SetAttributeValue("ldv_recurrenceruleexceptionid", value);
				OnPropertyChanged("ldv_recurrenceruleexceptionid");
			}
		}

		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		
		/// <summary>
		/// N:N, 'ldv_ldv_recurrenceruleexceptiongrouping_ldv_r'
		/// </summary>
		[RelationshipSchemaName("ldv_ldv_recurrenceruleexceptiongrouping_ldv_r")]
		public RecurrenceRuleExceptionGrouping[] RecurrenceRuleExceptionGroupingsOfldv_ldv_recurrenceruleexceptiongrouping_ldv_r

		{
			get
			{
				var enumerable = GetRelatedEntities<RecurrenceRuleExceptionGrouping>("ldv_ldv_recurrenceruleexceptiongrouping_ldv_r", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("RecurrenceRuleExceptionGroupingsOfldv_ldv_recurrenceruleexceptiongrouping_ldv_r");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<RecurrenceRuleExceptionGrouping>("ldv_ldv_recurrenceruleexceptiongrouping_ldv_r", null, value);
				OnPropertyChanged("RecurrenceRuleExceptionGroupingsOfldv_ldv_recurrenceruleexceptiongrouping_ldv_r");
			}
		}
		
		public static class RelationNames {
			public static RelationName RecurrenceRuleExceptionGroupingsOfldv_ldv_recurrenceruleexceptiongrouping_ldv_r = new RelationName("RecurrenceRuleExceptionGroupingsOfldv_ldv_recurrenceruleexceptiongrouping_ldv_r");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["RecurrenceRuleExceptionGroupingsOfldv_ldv_recurrenceruleexceptiongrouping_ldv_r"] = new object[] { "RecurrenceRuleExceptionGroupingsOfldv_ldv_recurrenceruleexceptiongrouping_ldv_r", "ldv_recurrenceruleexceptiongrouping", "ldv_ldv_recurrenceruleexceptiongrouping_ldv", "ldv_recurrenceruleexceptiongroupingid", "ldv_recurrenceruleexceptiongroupingid", "ldv_ldv_recurrenceruleexceptiongrouping_ldvid", "ldv_recurrenceruleexceptionid", "ldv_ldv_recurrenceruleexceptiongrouping_ldv_r", typeof (RecurrenceRuleExceptionGrouping[]) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public ldv_ldv_recurrenceruleexceptiongrouping_ldv(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		#endregion

		#region Metadata

		#endregion
	}

	#endregion

	#region Log

	/// <summary>
	/// 'ldv_log'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("ldv_log")]
	public partial class Log : GeneratedEntity<Log.RelationName>
	{
		
		public Log() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Log";
		public const string SchemaName = "ldv_log";
		public const string EntityLogicalName = "ldv_log";
		public const int EntityTypeCode = 10006;
		
		#region Attributes

		[AttributeLogicalName("ldv_logid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (LogId == null || LogId == Guid.Empty) ? base.Id : LogId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("ldv_logid");
                    base.Id = value;
                } else {
				    LogId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the record.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the record was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the record.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByDelegate");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedByDelegate");
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Sequence number of the import that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("importsequencenumber"))
				    value = (int?) backupAttributeCollection["importsequencenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ImportSequenceNumber");
					SetAttributeValue("importsequencenumber", value);
				OnPropertyChanged("ImportSequenceNumber");
			}
		}

		[AttributeLogicalName("ldv_assembly"), MaxLength(4000)]
		public string Assembly
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_assembly");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_assembly"))
				    value = (string) backupAttributeCollection["ldv_assembly"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Assembly");
					SetAttributeValue("ldv_assembly", value);
				OnPropertyChanged("Assembly");
			}
		}

		[AttributeLogicalName("ldv_entryclass"), MaxLength(4000)]
		public string EntryClass
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_entryclass");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_entryclass"))
				    value = (string) backupAttributeCollection["ldv_entryclass"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EntryClass");
					SetAttributeValue("ldv_entryclass", value);
				OnPropertyChanged("EntryClass");
			}
		}

		[AttributeLogicalName("ldv_entryfunction"), MaxLength(4000)]
		public string EntryFunction
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_entryfunction");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_entryfunction"))
				    value = (string) backupAttributeCollection["ldv_entryfunction"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EntryFunction");
					SetAttributeValue("ldv_entryfunction", value);
				OnPropertyChanged("EntryFunction");
			}
		}

		[AttributeLogicalName("ldv_exceptionlogentry")]
		public Guid? ExceptionLogEntry
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_exceptionlogentry");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_exceptionlogentry"))
				    value = (EntityReference) backupAttributeCollection["ldv_exceptionlogentry"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ExceptionLogEntry");
                if (value != null)
				    SetAttributeValue("ldv_exceptionlogentry", new EntityReference("ldv_logentry", value.Value));
                else
					SetAttributeValue("ldv_exceptionlogentry", value);
				OnPropertyChanged("ExceptionLogEntry");
			}
		}

        public string ExceptionLogEntryName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_exceptionlogentry");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_exceptionlogentry"))
				    value = (EntityReference) backupAttributeCollection["ldv_exceptionlogentry"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[AttributeLogicalName("ldv_exceptionmessage"), MaxLength(1048576)]
		public string ExceptionMessage
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_exceptionmessage");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_exceptionmessage"))
				    value = (string) backupAttributeCollection["ldv_exceptionmessage"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExceptionMessage");
					SetAttributeValue("ldv_exceptionmessage", value);
				OnPropertyChanged("ExceptionMessage");
			}
		}

		[AttributeLogicalName("ldv_exceptionthrown")]
		public bool? ExceptionThrown
		{
			get
			{
				var value = GetAttributeValue<bool?>("ldv_exceptionthrown");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_exceptionthrown"))
				    value = (bool?) backupAttributeCollection["ldv_exceptionthrown"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExceptionThrown");
					SetAttributeValue("ldv_exceptionthrown", value);
				OnPropertyChanged("ExceptionThrown");
			}
		}

		[AttributeLogicalName("ldv_executionduration"), InRange("0", "2147483647", typeof(int))]
		public int? ExecDurationms
		{
			get
			{
				var value = GetAttributeValue<int?>("ldv_executionduration");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_executionduration"))
				    value = (int?) backupAttributeCollection["ldv_executionduration"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExecDurationms");
					SetAttributeValue("ldv_executionduration", value);
				OnPropertyChanged("ExecDurationms");
			}
		}

		[AttributeLogicalName("ldv_executionendstate")]
		public ExecEndStateEnum? ExecEndState
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_executionendstate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_executionendstate"))
				    value = (OptionSetValue) backupAttributeCollection["ldv_executionendstate"];
                return value == null ? (ExecEndStateEnum?) null : (ExecEndStateEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("ExecEndState");
                if (value != null)
				    SetAttributeValue("ldv_executionendstate", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("ldv_executionendstate", value);
				OnPropertyChanged("ExecEndState");
			}
		}

		[AttributeLogicalName("ldv_information"), MaxLength(1048576)]
		public string Information
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_information");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_information"))
				    value = (string) backupAttributeCollection["ldv_information"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Information");
					SetAttributeValue("ldv_information", value);
				OnPropertyChanged("Information");
			}
		}

        /// <summary>
        ///  
		/// 'ldv_logId'.<br />
        /// Unique identifier for entity instances
        /// </summary>
		[AttributeLogicalName("ldv_logid")]
		public Guid? LogId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_logid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_logid"))
				    value = (Guid?) backupAttributeCollection["ldv_logid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LogId");
                if (value != null)
					SetAttributeValue("ldv_logid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("LogId");
			}
		}

        /// <summary>
        /// [MaximumLength=400] 
		/// 'ldv_name'.<br />
        /// The name of the custom entity.
        /// </summary>
		[AttributeLogicalName("ldv_name"), MaxLength(400)]
		public string LogID
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_name"))
				    value = (string) backupAttributeCollection["ldv_name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LogID");
					SetAttributeValue("ldv_name", value);
				OnPropertyChanged("LogID");
			}
		}

		[AttributeLogicalName("ldv_recordurl"), MaxLength(4000)]
		public string RecordURL
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_recordurl");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_recordurl"))
				    value = (string) backupAttributeCollection["ldv_recordurl"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordURL");
					SetAttributeValue("ldv_recordurl", value);
				OnPropertyChanged("RecordURL");
			}
		}

		[AttributeLogicalName("ldv_regardingid"), MaxLength(36)]
		public string RegardingID
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_regardingid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_regardingid"))
				    value = (string) backupAttributeCollection["ldv_regardingid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RegardingID");
					SetAttributeValue("ldv_regardingid", value);
				OnPropertyChanged("RegardingID");
			}
		}

		[AttributeLogicalName("ldv_regardingname"), MaxLength(4000)]
		public string RecordName
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_regardingname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_regardingname"))
				    value = (string) backupAttributeCollection["ldv_regardingname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordName");
					SetAttributeValue("ldv_regardingname", value);
				OnPropertyChanged("RecordName");
			}
		}

		[AttributeLogicalName("ldv_regardingtype"), MaxLength(2000)]
		public string RegardingType
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_regardingtype");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_regardingtype"))
				    value = (string) backupAttributeCollection["ldv_regardingtype"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RegardingType");
					SetAttributeValue("ldv_regardingtype", value);
				OnPropertyChanged("RegardingType");
			}
		}

		[AttributeLogicalName("ldv_startdate")]
		public DateTime? StartDate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("ldv_startdate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_startdate"))
				    value = (DateTime?) backupAttributeCollection["ldv_startdate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("StartDate");
					SetAttributeValue("ldv_startdate", value);
				OnPropertyChanged("StartDate");
			}
		}

		[AttributeLogicalName("ldv_title"), MaxLength(4000)]
		public string Title
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_title");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_title"))
				    value = (string) backupAttributeCollection["ldv_title"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Title");
					SetAttributeValue("ldv_title", value);
				OnPropertyChanged("Title");
			}
		}

		[AttributeLogicalName("ldv_user")]
		public Guid? User
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_user");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_user"))
				    value = (EntityReference) backupAttributeCollection["ldv_user"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("User");
                if (value != null)
				    SetAttributeValue("ldv_user", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("ldv_user", value);
				OnPropertyChanged("User");
			}
		}

        public string UserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_user");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_user"))
				    value = (EntityReference) backupAttributeCollection["ldv_user"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the record was modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByDelegate");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedByDelegate");
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overriddencreatedon"))
				    value = (DateTime?) backupAttributeCollection["overriddencreatedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordCreatedOn");
					SetAttributeValue("overriddencreatedon", value);
				OnPropertyChanged("RecordCreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'OwnerId'.<br />
        /// Owner Id
        /// </summary>
		[AttributeLogicalName("ownerid")]
		public EntityReference Owner
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Owner");
					SetAttributeValue("ownerid", value);
				OnPropertyChanged("Owner");
			}
		}

        public string OwnerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningBusinessUnit'.<br />
        /// Unique identifier for the business unit that owns the record
        /// </summary>
		[AttributeLogicalName("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningBusinessUnit");
                if (value != null)
				    SetAttributeValue("owningbusinessunit", new EntityReference("businessunit", value.Value));
                else
					SetAttributeValue("owningbusinessunit", value);
				OnPropertyChanged("OwningBusinessUnit");
			}
		}

        public string OwningBusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningTeam'.<br />
        /// Unique identifier for the team that owns the record.
        /// </summary>
		[AttributeLogicalName("owningteam")]
		public Guid? OwningTeam
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningTeam");
                if (value != null)
				    SetAttributeValue("owningteam", new EntityReference("team", value.Value));
                else
					SetAttributeValue("owningteam", value);
				OnPropertyChanged("OwningTeam");
			}
		}

        public string OwningTeamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningUser'.<br />
        /// Unique identifier for the user that owns the record.
        /// </summary>
		[AttributeLogicalName("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningUser");
                if (value != null)
				    SetAttributeValue("owninguser", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("owninguser", value);
				OnPropertyChanged("OwningUser");
			}
		}

        public string OwningUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'statecode'.<br />
        /// Status of the Log
        /// </summary>
		[AttributeLogicalName("statecode")]
		public StatusEnum? Status
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                return value == null ? (StatusEnum?) null : (StatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Status");
                if (value != null)
				    SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statecode", value);
				OnPropertyChanged("Status");
			}
		}

        /// <summary>
        ///  
		/// 'statuscode'.<br />
        /// Reason for the status of the Log
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public StatusReasonEnum? StatusReason
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                return value == null ? (StatusReasonEnum?) null : (StatusReasonEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("StatusReason");
                if (value != null)
				    SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statuscode", value);
				OnPropertyChanged("StatusReason");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber"), InRange("-1", "2147483647", typeof(int))]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezoneruleversionnumber"))
				    value = (int?) backupAttributeCollection["timezoneruleversionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneRuleVersionNumber");
					SetAttributeValue("timezoneruleversionnumber", value);
				OnPropertyChanged("TimeZoneRuleVersionNumber");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode"), InRange("-1", "2147483647", typeof(int))]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("utcconversiontimezonecode"))
				    value = (int?) backupAttributeCollection["utcconversiontimezonecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UTCConversionTimeZoneCode");
					SetAttributeValue("utcconversiontimezonecode", value);
				OnPropertyChanged("UTCConversionTimeZoneCode");
			}
		}

		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		
		public static class RelationNames {
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public Log(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["ldv_logid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		#region ExceptionThrown

		public enum ExceptionThrownEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region ExecEndState

		public enum ExecEndStateEnum
		{
			[EnumMember]Success = 0,
			[EnumMember]Failure = 1,
		}

		#endregion
	
		#region Status

		public enum StatusEnum
		{
			[EnumMember]Active = 0,
			[EnumMember]Inactive = 1,
		}

		#endregion
	
		#region StatusReason

		public enum StatusReasonEnum
		{
			[EnumMember]Active = 1,
			[EnumMember]Inactive = 2,
		}

		#endregion
	
		#endregion

		#region Metadata

		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return CrmHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return CrmHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}

			#region Logical names

			public static class Names
			{
				public const string ExceptionThrown = "ldv_exceptionthrown";
				public const string ExecEndState = "ldv_executionendstate";
				public const string Status = "statecode";
				public const string StatusReason = "statuscode";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class ExceptionThrown 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return CrmHelpers.GetValue(typeof(ExceptionThrown), label, languageCode);
					}
				}

				public static class ExecEndState 
				{
					public const string Success_1033 = "Success";
					public const string Failure_1033 = "Failure";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return CrmHelpers.GetValue(typeof(ExecEndState), label, languageCode);
					}
				}

				public static class Status 
				{
					public const string Active_1033 = "Active";
					public const string Inactive_1033 = "Inactive";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return CrmHelpers.GetValue(typeof(Status), label, languageCode);
					}
				}

				public static class StatusReason 
				{
					public const string Active_1033 = "Active";
					public const string Inactive_1033 = "Inactive";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return CrmHelpers.GetValue(typeof(StatusReason), label, languageCode);
					}
				}

			}

			#endregion
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedByDelegate = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string Assembly = "ldv_assembly";
			public const string EntryClass = "ldv_entryclass";
			public const string EntryFunction = "ldv_entryfunction";
			public const string ExceptionLogEntry = "ldv_exceptionlogentry";
			public const string ExceptionMessage = "ldv_exceptionmessage";
			public const string ExceptionThrown = "ldv_exceptionthrown";
			public const string ExecDurationms = "ldv_executionduration";
			public const string ExecEndState = "ldv_executionendstate";
			public const string Information = "ldv_information";
			public const string LogId = "ldv_logid";
			public const string LogID = "ldv_name";
			public const string RecordURL = "ldv_recordurl";
			public const string RegardingID = "ldv_regardingid";
			public const string RecordName = "ldv_regardingname";
			public const string RegardingType = "ldv_regardingtype";
			public const string StartDate = "ldv_startdate";
			public const string Title = "ldv_title";
			public const string User = "ldv_user";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedByDelegate = "modifiedonbehalfby";
			public const string RecordCreatedOn = "overriddencreatedon";
			public const string Owner = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string Status = "statecode";
			public const string StatusReason = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";

			#endregion

			#region Schema names

			public static class Schema
			{
				public const string CreatedBy = "CreatedBy";
				public const string CreatedOn = "CreatedOn";
				public const string CreatedByDelegate = "CreatedOnBehalfBy";
				public const string ImportSequenceNumber = "ImportSequenceNumber";
				public const string Assembly = "ldv_Assembly";
				public const string EntryClass = "ldv_EntryClass";
				public const string EntryFunction = "ldv_EntryFunction";
				public const string ExceptionLogEntry = "ldv_ExceptionLogEntry";
				public const string ExceptionMessage = "ldv_ExceptionMessage";
				public const string ExceptionThrown = "ldv_ExceptionThrown";
				public const string ExecDurationms = "ldv_ExecutionDuration";
				public const string ExecEndState = "ldv_ExecutionEndState";
				public const string Information = "ldv_Information";
				public const string LogId = "ldv_logId";
				public const string LogID = "ldv_name";
				public const string RecordURL = "ldv_RecordURL";
				public const string RegardingID = "ldv_RegardingID";
				public const string RecordName = "ldv_RegardingName";
				public const string RegardingType = "ldv_RegardingType";
				public const string StartDate = "ldv_StartDate";
				public const string Title = "ldv_Title";
				public const string User = "ldv_User";
				public const string ModifiedBy = "ModifiedBy";
				public const string ModifiedOn = "ModifiedOn";
				public const string ModifiedByDelegate = "ModifiedOnBehalfBy";
				public const string RecordCreatedOn = "OverriddenCreatedOn";
				public const string Owner = "OwnerId";
				public const string OwningBusinessUnit = "OwningBusinessUnit";
				public const string OwningTeam = "OwningTeam";
				public const string OwningUser = "OwningUser";
				public const string Status = "statecode";
				public const string StatusReason = "statuscode";
				public const string TimeZoneRuleVersionNumber = "TimeZoneRuleVersionNumber";
				public const string UTCConversionTimeZoneCode = "UTCConversionTimeZoneCode";
				public const string VersionNumber = "VersionNumber";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class CreatedBy
				{
					public const string _1033 = "Created By";
				}

				public static class CreatedOn
				{
					public const string _1033 = "Created On";
				}

				public static class CreatedByDelegate
				{
					public const string _1033 = "Created By (Delegate)";
				}

				public static class ImportSequenceNumber
				{
					public const string _1033 = "Import Sequence Number";
				}

				public static class Assembly
				{
					public const string _1033 = "Assembly";
				}

				public static class EntryClass
				{
					public const string _1033 = "Entry Class";
				}

				public static class EntryFunction
				{
					public const string _1033 = "Entry Function";
				}

				public static class ExceptionLogEntry
				{
					public const string _1033 = "Exception Log Entry";
				}

				public static class ExceptionMessage
				{
					public const string _1033 = "Exception Message";
				}

				public static class ExceptionThrown
				{
					public const string _1033 = "Exception Thrown";
				}

				public static class ExecDurationms
				{
					public const string _1033 = "Exec. Duration (ms)";
				}

				public static class ExecEndState
				{
					public const string _1033 = "Exec. End State";
				}

				public static class Information
				{
					public const string _1033 = "Information";
				}

				public static class LogId
				{
					public const string _1033 = "Log";
				}

				public static class LogID
				{
					public const string _1033 = "Log ID";
				}

				public static class RecordURL
				{
					public const string _1033 = "Record URL";
				}

				public static class RegardingID
				{
					public const string _1033 = "Regarding ID";
				}

				public static class RecordName
				{
					public const string _1033 = "Record Name";
				}

				public static class RegardingType
				{
					public const string _1033 = "Regarding Type";
				}

				public static class StartDate
				{
					public const string _1033 = "Start Date";
				}

				public static class Title
				{
					public const string _1033 = "Title";
				}

				public static class User
				{
					public const string _1033 = "User";
				}

				public static class ModifiedBy
				{
					public const string _1033 = "Modified By";
				}

				public static class ModifiedOn
				{
					public const string _1033 = "Modified On";
				}

				public static class ModifiedByDelegate
				{
					public const string _1033 = "Modified By (Delegate)";
				}

				public static class RecordCreatedOn
				{
					public const string _1033 = "Record Created On";
				}

				public static class Owner
				{
					public const string _1033 = "Owner";
				}

				public static class OwningBusinessUnit
				{
					public const string _1033 = "Owning Business Unit";
				}

				public static class OwningTeam
				{
					public const string _1033 = "Owning Team";
				}

				public static class OwningUser
				{
					public const string _1033 = "Owning User";
				}

				public static class Status
				{
					public const string _1033 = "Status";
				}

				public static class StatusReason
				{
					public const string _1033 = "Status Reason";
				}

				public static class TimeZoneRuleVersionNumber
				{
					public const string _1033 = "Time Zone Rule Version Number";
				}

				public static class UTCConversionTimeZoneCode
				{
					public const string _1033 = "UTC Conversion Time Zone Code";
				}

				public static class VersionNumber
				{
				}

			}

			#endregion
		}

		#endregion

		#region Relations

		public static class Relations
		{
			public static class OneToN
			{
			}
			
			public static class NToOne
			{

				public static class Lookups
				{
				}
			}

			public static class NToN
			{

			}
		}

		#endregion

		#endregion
	}

	#endregion

	#region RecurrenceRule

	/// <summary>
	/// 'ldv_recurrencerule'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("ldv_recurrencerule")]
	public partial class RecurrenceRule : GeneratedEntity<RecurrenceRule.RelationName>
	{
		
		public RecurrenceRule() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Recurrence Rule";
		public const string SchemaName = "ldv_recurrencerule";
		public const string EntityLogicalName = "ldv_recurrencerule";
		public const int EntityTypeCode = 10012;
		
		#region Attributes

		[AttributeLogicalName("ldv_recurrenceruleid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (RecurrenceRuleId == null || RecurrenceRuleId == Guid.Empty) ? base.Id : RecurrenceRuleId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("ldv_recurrenceruleid");
                    base.Id = value;
                } else {
				    RecurrenceRuleId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the record.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the record was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the record.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByDelegate");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedByDelegate");
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Sequence number of the import that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("importsequencenumber"))
				    value = (int?) backupAttributeCollection["importsequencenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ImportSequenceNumber");
					SetAttributeValue("importsequencenumber", value);
				OnPropertyChanged("ImportSequenceNumber");
			}
		}

		[AttributeLogicalName("ldv_dailyfrequency"), InRange("1", "2147483647", typeof(int))]
		public int? DailyFrequency
		{
			get
			{
				var value = GetAttributeValue<int?>("ldv_dailyfrequency");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_dailyfrequency"))
				    value = (int?) backupAttributeCollection["ldv_dailyfrequency"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DailyFrequency");
					SetAttributeValue("ldv_dailyfrequency", value);
				OnPropertyChanged("DailyFrequency");
			}
		}

		[AttributeLogicalName("ldv_dayoccurrences"), MaxLength(4000)]
		public string DayOccurrences
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_dayoccurrences");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_dayoccurrences"))
				    value = (string) backupAttributeCollection["ldv_dayoccurrences"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DayOccurrences");
					SetAttributeValue("ldv_dayoccurrences", value);
				OnPropertyChanged("DayOccurrences");
			}
		}

		[AttributeLogicalName("ldv_daysofthemonth"), MaxLength(4000)]
		public string DaysOfTheMonth
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_daysofthemonth");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_daysofthemonth"))
				    value = (string) backupAttributeCollection["ldv_daysofthemonth"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DaysOfTheMonth");
					SetAttributeValue("ldv_daysofthemonth", value);
				OnPropertyChanged("DaysOfTheMonth");
			}
		}

		[AttributeLogicalName("ldv_enddate")]
		public DateTime? EndDate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("ldv_enddate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_enddate"))
				    value = (DateTime?) backupAttributeCollection["ldv_enddate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EndDate");
					SetAttributeValue("ldv_enddate", value);
				OnPropertyChanged("EndDate");
			}
		}

		[AttributeLogicalName("ldv_exceptionupdatedtrigger"), MaxLength(4000)]
		public string ExceptionUpdatedTrigger
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_exceptionupdatedtrigger");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_exceptionupdatedtrigger"))
				    value = (string) backupAttributeCollection["ldv_exceptionupdatedtrigger"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExceptionUpdatedTrigger");
					SetAttributeValue("ldv_exceptionupdatedtrigger", value);
				OnPropertyChanged("ExceptionUpdatedTrigger");
			}
		}

		[AttributeLogicalName("ldv_hourlyfrequency"), InRange("1", "2147483647", typeof(int))]
		public int? HourlyFrequency
		{
			get
			{
				var value = GetAttributeValue<int?>("ldv_hourlyfrequency");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_hourlyfrequency"))
				    value = (int?) backupAttributeCollection["ldv_hourlyfrequency"];
			    return value;
			}
			set
			{
				OnPropertyChanging("HourlyFrequency");
					SetAttributeValue("ldv_hourlyfrequency", value);
				OnPropertyChanged("HourlyFrequency");
			}
		}

		[AttributeLogicalName("ldv_minutefrequency"), InRange("1", "2147483647", typeof(int))]
		public int? MinuteFrequency
		{
			get
			{
				var value = GetAttributeValue<int?>("ldv_minutefrequency");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_minutefrequency"))
				    value = (int?) backupAttributeCollection["ldv_minutefrequency"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MinuteFrequency");
					SetAttributeValue("ldv_minutefrequency", value);
				OnPropertyChanged("MinuteFrequency");
			}
		}

		[AttributeLogicalName("ldv_monthlydayoccurrence")]
		public MonthlyDayOccurrenceEnum? MonthlyDayOccurrence
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_monthlydayoccurrence");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_monthlydayoccurrence"))
				    value = (OptionSetValue) backupAttributeCollection["ldv_monthlydayoccurrence"];
                return value == null ? (MonthlyDayOccurrenceEnum?) null : (MonthlyDayOccurrenceEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("MonthlyDayOccurrence");
                if (value != null)
				    SetAttributeValue("ldv_monthlydayoccurrence", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("ldv_monthlydayoccurrence", value);
				OnPropertyChanged("MonthlyDayOccurrence");
			}
		}

		[AttributeLogicalName("ldv_monthlypattern")]
		public MonthlyPatternEnum? MonthlyPattern
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_monthlypattern");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_monthlypattern"))
				    value = (OptionSetValue) backupAttributeCollection["ldv_monthlypattern"];
                return value == null ? (MonthlyPatternEnum?) null : (MonthlyPatternEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("MonthlyPattern");
                if (value != null)
				    SetAttributeValue("ldv_monthlypattern", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("ldv_monthlypattern", value);
				OnPropertyChanged("MonthlyPattern");
			}
		}

		[AttributeLogicalName("ldv_monthofyear")]
		public MonthOfYearEnum? MonthOfYear
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_monthofyear");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_monthofyear"))
				    value = (OptionSetValue) backupAttributeCollection["ldv_monthofyear"];
                return value == null ? (MonthOfYearEnum?) null : (MonthOfYearEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("MonthOfYear");
                if (value != null)
				    SetAttributeValue("ldv_monthofyear", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("ldv_monthofyear", value);
				OnPropertyChanged("MonthOfYear");
			}
		}

		[AttributeLogicalName("ldv_months"), MaxLength(4000)]
		public string Months
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_months");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_months"))
				    value = (string) backupAttributeCollection["ldv_months"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Months");
					SetAttributeValue("ldv_months", value);
				OnPropertyChanged("Months");
			}
		}

        /// <summary>
        /// [Required][MaximumLength=100] 
		/// 'ldv_name'.<br />
        /// The name of the custom entity.
        /// </summary>
		[AttributeLogicalName("ldv_name"), Required, MaxLength(100)]
		public string Name
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_name"))
				    value = (string) backupAttributeCollection["ldv_name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Name");
					SetAttributeValue("ldv_name", value);
				OnPropertyChanged("Name");
			}
		}

		[AttributeLogicalName("ldv_occurrencecount"), InRange("1", "2147483647", typeof(int))]
		public int? OccurrenceCount
		{
			get
			{
				var value = GetAttributeValue<int?>("ldv_occurrencecount");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_occurrencecount"))
				    value = (int?) backupAttributeCollection["ldv_occurrencecount"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OccurrenceCount");
					SetAttributeValue("ldv_occurrencecount", value);
				OnPropertyChanged("OccurrenceCount");
			}
		}

		[AttributeLogicalName("ldv_recurrencepattern"), Required]
		public RecurrencePatternEnum? RecurrencePattern
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_recurrencepattern");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_recurrencepattern"))
				    value = (OptionSetValue) backupAttributeCollection["ldv_recurrencepattern"];
                return value == null ? (RecurrencePatternEnum?) null : (RecurrencePatternEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("RecurrencePattern");
                if (value != null)
				    SetAttributeValue("ldv_recurrencepattern", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("ldv_recurrencepattern", value);
				OnPropertyChanged("RecurrencePattern");
			}
		}

        /// <summary>
        ///  
		/// 'ldv_recurrenceruleId'.<br />
        /// Unique identifier for entity instances
        /// </summary>
		[AttributeLogicalName("ldv_recurrenceruleid")]
		public Guid? RecurrenceRuleId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_recurrenceruleid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_recurrenceruleid"))
				    value = (Guid?) backupAttributeCollection["ldv_recurrenceruleid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecurrenceRuleId");
                if (value != null)
					SetAttributeValue("ldv_recurrenceruleid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("RecurrenceRuleId");
			}
		}

		[AttributeLogicalName("ldv_startdate"), Required]
		public DateTime? StartDate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("ldv_startdate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_startdate"))
				    value = (DateTime?) backupAttributeCollection["ldv_startdate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("StartDate");
					SetAttributeValue("ldv_startdate", value);
				OnPropertyChanged("StartDate");
			}
		}

		[AttributeLogicalName("ldv_weekday")]
		public WeekDayEnum? WeekDay
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_weekday");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_weekday"))
				    value = (OptionSetValue) backupAttributeCollection["ldv_weekday"];
                return value == null ? (WeekDayEnum?) null : (WeekDayEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("WeekDay");
                if (value != null)
				    SetAttributeValue("ldv_weekday", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("ldv_weekday", value);
				OnPropertyChanged("WeekDay");
			}
		}

		[AttributeLogicalName("ldv_weekdays"), MaxLength(4000)]
		public string WeekDays
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_weekdays");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_weekdays"))
				    value = (string) backupAttributeCollection["ldv_weekdays"];
			    return value;
			}
			set
			{
				OnPropertyChanging("WeekDays");
					SetAttributeValue("ldv_weekdays", value);
				OnPropertyChanged("WeekDays");
			}
		}

		[AttributeLogicalName("ldv_weeklyfrequency"), InRange("1", "2147483647", typeof(int))]
		public int? WeeklyFrequency
		{
			get
			{
				var value = GetAttributeValue<int?>("ldv_weeklyfrequency");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_weeklyfrequency"))
				    value = (int?) backupAttributeCollection["ldv_weeklyfrequency"];
			    return value;
			}
			set
			{
				OnPropertyChanging("WeeklyFrequency");
					SetAttributeValue("ldv_weeklyfrequency", value);
				OnPropertyChanged("WeeklyFrequency");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the record was modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByDelegate");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedByDelegate");
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overriddencreatedon"))
				    value = (DateTime?) backupAttributeCollection["overriddencreatedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordCreatedOn");
					SetAttributeValue("overriddencreatedon", value);
				OnPropertyChanged("RecordCreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'OwnerId'.<br />
        /// Owner Id
        /// </summary>
		[AttributeLogicalName("ownerid")]
		public EntityReference Owner
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Owner");
					SetAttributeValue("ownerid", value);
				OnPropertyChanged("Owner");
			}
		}

        public string OwnerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningBusinessUnit'.<br />
        /// Unique identifier for the business unit that owns the record
        /// </summary>
		[AttributeLogicalName("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningBusinessUnit");
                if (value != null)
				    SetAttributeValue("owningbusinessunit", new EntityReference("businessunit", value.Value));
                else
					SetAttributeValue("owningbusinessunit", value);
				OnPropertyChanged("OwningBusinessUnit");
			}
		}

        public string OwningBusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningTeam'.<br />
        /// Unique identifier for the team that owns the record.
        /// </summary>
		[AttributeLogicalName("owningteam")]
		public Guid? OwningTeam
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningTeam");
                if (value != null)
				    SetAttributeValue("owningteam", new EntityReference("team", value.Value));
                else
					SetAttributeValue("owningteam", value);
				OnPropertyChanged("OwningTeam");
			}
		}

        public string OwningTeamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningUser'.<br />
        /// Unique identifier for the user that owns the record.
        /// </summary>
		[AttributeLogicalName("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningUser");
                if (value != null)
				    SetAttributeValue("owninguser", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("owninguser", value);
				OnPropertyChanged("OwningUser");
			}
		}

        public string OwningUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'statecode'.<br />
        /// Status of the Recurrence Rule
        /// </summary>
		[AttributeLogicalName("statecode")]
		public StatusEnum? Status
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                return value == null ? (StatusEnum?) null : (StatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Status");
                if (value != null)
				    SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statecode", value);
				OnPropertyChanged("Status");
			}
		}

        /// <summary>
        ///  
		/// 'statuscode'.<br />
        /// Reason for the status of the Recurrence Rule
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public StatusReasonEnum? StatusReason
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                return value == null ? (StatusReasonEnum?) null : (StatusReasonEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("StatusReason");
                if (value != null)
				    SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statuscode", value);
				OnPropertyChanged("StatusReason");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber"), InRange("-1", "2147483647", typeof(int))]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezoneruleversionnumber"))
				    value = (int?) backupAttributeCollection["timezoneruleversionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneRuleVersionNumber");
					SetAttributeValue("timezoneruleversionnumber", value);
				OnPropertyChanged("TimeZoneRuleVersionNumber");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode"), InRange("-1", "2147483647", typeof(int))]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("utcconversiontimezonecode"))
				    value = (int?) backupAttributeCollection["utcconversiontimezonecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UTCConversionTimeZoneCode");
					SetAttributeValue("utcconversiontimezonecode", value);
				OnPropertyChanged("UTCConversionTimeZoneCode");
			}
		}

		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		
		/// <summary>
		/// N:N, 'ldv_ldv_recurrencerule_ldv_recurrenceexgroup'
		/// </summary>
		[RelationshipSchemaName("ldv_ldv_recurrencerule_ldv_recurrenceexgroup")]
		public RecurrenceRuleExceptionGrouping[] RecurrenceRuleExceptionGroupingsOfldv_ldv_recurrencerule_ldv_recurrenceexgroup

		{
			get
			{
				var enumerable = GetRelatedEntities<RecurrenceRuleExceptionGrouping>("ldv_ldv_recurrencerule_ldv_recurrenceexgroup", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("RecurrenceRuleExceptionGroupingsOfldv_ldv_recurrencerule_ldv_recurrenceexgroup");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<RecurrenceRuleExceptionGrouping>("ldv_ldv_recurrencerule_ldv_recurrenceexgroup", null, value);
				OnPropertyChanged("RecurrenceRuleExceptionGroupingsOfldv_ldv_recurrencerule_ldv_recurrenceexgroup");
			}
		}
		
		/// <summary>
		/// N:N, 'ldv_ldv_recurrencerule_ldv_recurrenceruleexce'
		/// </summary>
		[RelationshipSchemaName("ldv_ldv_recurrencerule_ldv_recurrenceruleexce")]
		public RecurrenceRuleException[] RecurrenceRuleExceptionsOfldv_ldv_recurrencerule_ldv_recurrenceruleexce

		{
			get
			{
				var enumerable = GetRelatedEntities<RecurrenceRuleException>("ldv_ldv_recurrencerule_ldv_recurrenceruleexce", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("RecurrenceRuleExceptionsOfldv_ldv_recurrencerule_ldv_recurrenceruleexce");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<RecurrenceRuleException>("ldv_ldv_recurrencerule_ldv_recurrenceruleexce", null, value);
				OnPropertyChanged("RecurrenceRuleExceptionsOfldv_ldv_recurrencerule_ldv_recurrenceruleexce");
			}
		}
		
		public static class RelationNames {
			public static RelationName RecurrenceRuleExceptionGroupingsOfldv_ldv_recurrencerule_ldv_recurrenceexgroup = new RelationName("RecurrenceRuleExceptionGroupingsOfldv_ldv_recurrencerule_ldv_recurrenceexgroup");
			public static RelationName RecurrenceRuleExceptionsOfldv_ldv_recurrencerule_ldv_recurrenceruleexce = new RelationName("RecurrenceRuleExceptionsOfldv_ldv_recurrencerule_ldv_recurrenceruleexce");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["RecurrenceRuleExceptionGroupingsOfldv_ldv_recurrencerule_ldv_recurrenceexgroup"] = new object[] { "RecurrenceRuleExceptionGroupingsOfldv_ldv_recurrencerule_ldv_recurrenceexgroup", "ldv_recurrenceruleexceptiongrouping", "ldv_ldv_recurrencerule_ldv_recurrenceexgrou", "ldv_recurrenceruleexceptiongroupingid", "ldv_recurrenceruleexceptiongroupingid", "ldv_recurrenceruleid", "ldv_recurrenceruleid", "ldv_ldv_recurrencerule_ldv_recurrenceexgroup", typeof (RecurrenceRuleExceptionGrouping[]) };
			relationProperties["RecurrenceRuleExceptionsOfldv_ldv_recurrencerule_ldv_recurrenceruleexce"] = new object[] { "RecurrenceRuleExceptionsOfldv_ldv_recurrencerule_ldv_recurrenceruleexce", "ldv_recurrenceruleexception", "ldv_ldv_recurrencerule_ldv_recurrenceruleex", "ldv_recurrenceruleexceptionid", "ldv_recurrenceruleexceptionid", "ldv_recurrenceruleid", "ldv_recurrenceruleid", "ldv_ldv_recurrencerule_ldv_recurrenceruleexce", typeof (RecurrenceRuleException[]) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public RecurrenceRule(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["ldv_recurrenceruleid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		#region MonthlyDayOccurrence

		public enum MonthlyDayOccurrenceEnum
		{
			[EnumMember]First = 1,
			[EnumMember]Second = 2,
			[EnumMember]Third = 3,
			[EnumMember]Fourth = 4,
			[EnumMember]Last = 5,
		}

		#endregion
	
		#region MonthlyPattern

		public enum MonthlyPatternEnum
		{
			[EnumMember]SpecificDays = 1,
			[EnumMember]DayOccurrence = 2,
		}

		#endregion
	
		#region MonthOfYear

		public enum MonthOfYearEnum
		{
			[EnumMember]January = 1,
			[EnumMember]February = 2,
			[EnumMember]March = 3,
			[EnumMember]April = 4,
			[EnumMember]May = 5,
			[EnumMember]June = 6,
			[EnumMember]July = 7,
			[EnumMember]August = 8,
			[EnumMember]September = 9,
			[EnumMember]October = 10,
			[EnumMember]November = 11,
			[EnumMember]December = 12,
		}

		#endregion
	
		#region RecurrencePattern

		public enum RecurrencePatternEnum
		{
			[EnumMember]EveryMinute = 1,
			[EnumMember]Hourly = 2,
			[EnumMember]Daily = 3,
			[EnumMember]Weekly = 4,
			[EnumMember]Monthly = 5,
		}

		#endregion
	
		#region WeekDay

		public enum WeekDayEnum
		{
			[EnumMember]Sunday = 1,
			[EnumMember]Monday = 2,
			[EnumMember]Tuesday = 3,
			[EnumMember]Wednesday = 4,
			[EnumMember]Thursday = 5,
			[EnumMember]Friday = 6,
			[EnumMember]Saturday = 7,
		}

		#endregion
	
		#region Status

		public enum StatusEnum
		{
			[EnumMember]Active = 0,
			[EnumMember]Inactive = 1,
		}

		#endregion
	
		#region StatusReason

		public enum StatusReasonEnum
		{
			[EnumMember]Active = 1,
			[EnumMember]Inactive = 2,
		}

		#endregion
	
		#endregion

		#region Metadata

		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return CrmHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return CrmHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}

			#region Logical names

			public static class Names
			{
				public const string MonthlyDayOccurrence = "ldv_monthlydayoccurrence";
				public const string MonthlyPattern = "ldv_monthlypattern";
				public const string MonthOfYear = "ldv_monthofyear";
				public const string RecurrencePattern = "ldv_recurrencepattern";
				public const string WeekDay = "ldv_weekday";
				public const string Status = "statecode";
				public const string StatusReason = "statuscode";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class MonthlyDayOccurrence 
				{
					public const string First_1033 = "First";
					public const string Second_1033 = "Second";
					public const string Third_1033 = "Third";
					public const string Fourth_1033 = "Fourth";
					public const string Last_1033 = "Last";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return CrmHelpers.GetValue(typeof(MonthlyDayOccurrence), label, languageCode);
					}
				}

				public static class MonthlyPattern 
				{
					public const string SpecificDays_1033 = "Specific Days";
					public const string DayOccurrence_1033 = "Day Occurrence";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return CrmHelpers.GetValue(typeof(MonthlyPattern), label, languageCode);
					}
				}

				public static class MonthOfYear 
				{
					public const string January_1033 = "January";
					public const string February_1033 = "February";
					public const string March_1033 = "March";
					public const string April_1033 = "April";
					public const string May_1033 = "May";
					public const string June_1033 = "June";
					public const string July_1033 = "July";
					public const string August_1033 = "August";
					public const string September_1033 = "September";
					public const string October_1033 = "October";
					public const string November_1033 = "November";
					public const string December_1033 = "December";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return CrmHelpers.GetValue(typeof(MonthOfYear), label, languageCode);
					}
				}

				public static class RecurrencePattern 
				{
					public const string EveryMinute_1033 = "Every Minute";
					public const string Hourly_1033 = "Hourly";
					public const string Daily_1033 = "Daily";
					public const string Weekly_1033 = "Weekly";
					public const string Monthly_1033 = "Monthly";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return CrmHelpers.GetValue(typeof(RecurrencePattern), label, languageCode);
					}
				}

				public static class WeekDay 
				{
					public const string Sunday_1033 = "Sunday";
					public const string Monday_1033 = "Monday";
					public const string Tuesday_1033 = "Tuesday";
					public const string Wednesday_1033 = "Wednesday";
					public const string Thursday_1033 = "Thursday";
					public const string Friday_1033 = "Friday";
					public const string Saturday_1033 = "Saturday";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return CrmHelpers.GetValue(typeof(WeekDay), label, languageCode);
					}
				}

				public static class Status 
				{
					public const string Active_1033 = "Active";
					public const string Active_1025 = "نشط";
					public const string Inactive_1033 = "Inactive";
					public const string Inactive_1025 = "غير نشط";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return CrmHelpers.GetValue(typeof(Status), label, languageCode);
					}
				}

				public static class StatusReason 
				{
					public const string Active_1033 = "Active";
					public const string Active_1025 = "نشط";
					public const string Inactive_1033 = "Inactive";
					public const string Inactive_1025 = "غير نشط";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return CrmHelpers.GetValue(typeof(StatusReason), label, languageCode);
					}
				}

			}

			#endregion
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedByDelegate = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string DailyFrequency = "ldv_dailyfrequency";
			public const string DayOccurrences = "ldv_dayoccurrences";
			public const string DaysOfTheMonth = "ldv_daysofthemonth";
			public const string EndDate = "ldv_enddate";
			public const string ExceptionUpdatedTrigger = "ldv_exceptionupdatedtrigger";
			public const string HourlyFrequency = "ldv_hourlyfrequency";
			public const string MinuteFrequency = "ldv_minutefrequency";
			public const string MonthlyDayOccurrence = "ldv_monthlydayoccurrence";
			public const string MonthlyPattern = "ldv_monthlypattern";
			public const string MonthOfYear = "ldv_monthofyear";
			public const string Months = "ldv_months";
			public const string Name = "ldv_name";
			public const string OccurrenceCount = "ldv_occurrencecount";
			public const string RecurrencePattern = "ldv_recurrencepattern";
			public const string RecurrenceRuleId = "ldv_recurrenceruleid";
			public const string StartDate = "ldv_startdate";
			public const string WeekDay = "ldv_weekday";
			public const string WeekDays = "ldv_weekdays";
			public const string WeeklyFrequency = "ldv_weeklyfrequency";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedByDelegate = "modifiedonbehalfby";
			public const string RecordCreatedOn = "overriddencreatedon";
			public const string Owner = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string Status = "statecode";
			public const string StatusReason = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";

			#endregion

			#region Schema names

			public static class Schema
			{
				public const string CreatedBy = "CreatedBy";
				public const string CreatedOn = "CreatedOn";
				public const string CreatedByDelegate = "CreatedOnBehalfBy";
				public const string ImportSequenceNumber = "ImportSequenceNumber";
				public const string DailyFrequency = "ldv_DailyFrequency";
				public const string DayOccurrences = "ldv_DayOccurrences";
				public const string DaysOfTheMonth = "ldv_DaysOfTheMonth";
				public const string EndDate = "ldv_EndDate";
				public const string ExceptionUpdatedTrigger = "ldv_ExceptionUpdatedTrigger";
				public const string HourlyFrequency = "ldv_HourlyFrequency";
				public const string MinuteFrequency = "ldv_MinuteFrequency";
				public const string MonthlyDayOccurrence = "ldv_MonthlyDayOccurrence";
				public const string MonthlyPattern = "ldv_MonthlyPattern";
				public const string MonthOfYear = "ldv_MonthOfYear";
				public const string Months = "ldv_Months";
				public const string Name = "ldv_name";
				public const string OccurrenceCount = "ldv_OccurrenceCount";
				public const string RecurrencePattern = "ldv_RecurrencePattern";
				public const string RecurrenceRuleId = "ldv_recurrenceruleId";
				public const string StartDate = "ldv_StartDate";
				public const string WeekDay = "ldv_WeekDay";
				public const string WeekDays = "ldv_WeekDays";
				public const string WeeklyFrequency = "ldv_WeeklyFrequency";
				public const string ModifiedBy = "ModifiedBy";
				public const string ModifiedOn = "ModifiedOn";
				public const string ModifiedByDelegate = "ModifiedOnBehalfBy";
				public const string RecordCreatedOn = "OverriddenCreatedOn";
				public const string Owner = "OwnerId";
				public const string OwningBusinessUnit = "OwningBusinessUnit";
				public const string OwningTeam = "OwningTeam";
				public const string OwningUser = "OwningUser";
				public const string Status = "statecode";
				public const string StatusReason = "statuscode";
				public const string TimeZoneRuleVersionNumber = "TimeZoneRuleVersionNumber";
				public const string UTCConversionTimeZoneCode = "UTCConversionTimeZoneCode";
				public const string VersionNumber = "VersionNumber";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class CreatedBy
				{
					public const string _1033 = "Created By";
					public const string _1025 = "منشأ بواسطة";
				}

				public static class CreatedOn
				{
					public const string _1033 = "Created On";
					public const string _1025 = "تاريخ الإنشاء";
				}

				public static class CreatedByDelegate
				{
					public const string _1033 = "Created By (Delegate)";
					public const string _1025 = "قام بإنشائه (المفوّض)";
				}

				public static class ImportSequenceNumber
				{
					public const string _1033 = "Import Sequence Number";
					public const string _1025 = "الرقم التسلسلي للاستيراد";
				}

				public static class DailyFrequency
				{
					public const string _1033 = "Daily Frequency";
				}

				public static class DayOccurrences
				{
					public const string _1033 = "Day Occurrences";
				}

				public static class DaysOfTheMonth
				{
					public const string _1033 = "Days Of The Month";
				}

				public static class EndDate
				{
					public const string _1033 = "End Date";
				}

				public static class ExceptionUpdatedTrigger
				{
					public const string _1033 = "Exception Updated Trigger";
				}

				public static class HourlyFrequency
				{
					public const string _1033 = "Hourly Frequency";
				}

				public static class MinuteFrequency
				{
					public const string _1033 = "Minute Frequency";
				}

				public static class MonthlyDayOccurrence
				{
					public const string _1033 = "Monthly Day Occurrence";
				}

				public static class MonthlyPattern
				{
					public const string _1033 = "Monthly Pattern";
				}

				public static class MonthOfYear
				{
					public const string _1033 = "Month Of Year";
				}

				public static class Months
				{
					public const string _1033 = "Months";
				}

				public static class Name
				{
					public const string _1033 = "Name";
				}

				public static class OccurrenceCount
				{
					public const string _1033 = "Occurrence Count";
				}

				public static class RecurrencePattern
				{
					public const string _1033 = "Recurrence Pattern";
				}

				public static class RecurrenceRuleId
				{
					public const string _1033 = "Recurrence Rule";
				}

				public static class StartDate
				{
					public const string _1033 = "Start Date";
				}

				public static class WeekDay
				{
					public const string _1033 = "Week Day";
				}

				public static class WeekDays
				{
					public const string _1033 = "Week Days";
				}

				public static class WeeklyFrequency
				{
					public const string _1033 = "Weekly Frequency";
				}

				public static class ModifiedBy
				{
					public const string _1033 = "Modified By";
					public const string _1025 = "تعديل بواسطة";
				}

				public static class ModifiedOn
				{
					public const string _1033 = "Modified On";
					public const string _1025 = "تاريخ التعديل";
				}

				public static class ModifiedByDelegate
				{
					public const string _1033 = "Modified By (Delegate)";
					public const string _1025 = "قام بالتعديل (المفوّض)";
				}

				public static class RecordCreatedOn
				{
					public const string _1033 = "Record Created On";
					public const string _1025 = "تم إنشاء السجل في";
				}

				public static class Owner
				{
					public const string _1033 = "Owner";
					public const string _1025 = "المالك";
				}

				public static class OwningBusinessUnit
				{
					public const string _1033 = "Owning Business Unit";
					public const string _1025 = "وحدة الأعمال المالكة";
				}

				public static class OwningTeam
				{
					public const string _1033 = "Owning Team";
					public const string _1025 = "الفريق المالك";
				}

				public static class OwningUser
				{
					public const string _1033 = "Owning User";
					public const string _1025 = "المستخدم المالك";
				}

				public static class Status
				{
					public const string _1033 = "Status";
					public const string _1025 = "الحالة";
				}

				public static class StatusReason
				{
					public const string _1033 = "Status Reason";
					public const string _1025 = "سبب الحالة";
				}

				public static class TimeZoneRuleVersionNumber
				{
					public const string _1033 = "Time Zone Rule Version Number";
					public const string _1025 = "رقم إصدار قاعدة المنطقة الزمنية";
				}

				public static class UTCConversionTimeZoneCode
				{
					public const string _1033 = "UTC Conversion Time Zone Code";
					public const string _1025 = "رمز المنطقة الزمنية لتحويل UTC";
				}

				public static class VersionNumber
				{
				}

			}

			#endregion
		}

		#endregion

		#region Relations

		public static class Relations
		{
			public static class OneToN
			{
			}
			
			public static class NToOne
			{

				public static class Lookups
				{
				}
			}

			public static class NToN
			{

				public const string RecurrenceRuleExceptionGroupingsOfldv_ldv_recurrencerule_ldv_recurrenceexgroup = "ldv_ldv_recurrencerule_ldv_recurrenceexgroup";
				public const string RecurrenceRuleExceptionsOfldv_ldv_recurrencerule_ldv_recurrenceruleexce = "ldv_ldv_recurrencerule_ldv_recurrenceruleexce";
			}
		}

		#endregion

		#endregion
	}

	#endregion

	#region RecurrenceRuleException

	/// <summary>
	/// 'ldv_recurrenceruleexception'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("ldv_recurrenceruleexception")]
	public partial class RecurrenceRuleException : GeneratedEntity<RecurrenceRuleException.RelationName>
	{
		
		public RecurrenceRuleException() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Recurrence Rule Exception";
		public const string SchemaName = "ldv_recurrenceruleexception";
		public const string EntityLogicalName = "ldv_recurrenceruleexception";
		public const int EntityTypeCode = 10013;
		
		#region Attributes

		[AttributeLogicalName("ldv_recurrenceruleexceptionid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (RecurrenceRuleExceptionId == null || RecurrenceRuleExceptionId == Guid.Empty) ? base.Id : RecurrenceRuleExceptionId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("ldv_recurrenceruleexceptionid");
                    base.Id = value;
                } else {
				    RecurrenceRuleExceptionId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the record.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the record was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the record.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByDelegate");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedByDelegate");
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Sequence number of the import that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("importsequencenumber"))
				    value = (int?) backupAttributeCollection["importsequencenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ImportSequenceNumber");
					SetAttributeValue("importsequencenumber", value);
				OnPropertyChanged("ImportSequenceNumber");
			}
		}

		[AttributeLogicalName("ldv_daysofthemonth"), MaxLength(4000)]
		public string DaysOfTheMonth
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_daysofthemonth");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_daysofthemonth"))
				    value = (string) backupAttributeCollection["ldv_daysofthemonth"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DaysOfTheMonth");
					SetAttributeValue("ldv_daysofthemonth", value);
				OnPropertyChanged("DaysOfTheMonth");
			}
		}

		[AttributeLogicalName("ldv_enddate")]
		public DateTime? EndDate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("ldv_enddate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_enddate"))
				    value = (DateTime?) backupAttributeCollection["ldv_enddate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EndDate");
					SetAttributeValue("ldv_enddate", value);
				OnPropertyChanged("EndDate");
			}
		}

		[AttributeLogicalName("ldv_hours"), MaxLength(4000)]
		public string Hours
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_hours");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_hours"))
				    value = (string) backupAttributeCollection["ldv_hours"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Hours");
					SetAttributeValue("ldv_hours", value);
				OnPropertyChanged("Hours");
			}
		}

		[AttributeLogicalName("ldv_minutes"), MaxLength(4000)]
		public string Minutes
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_minutes");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_minutes"))
				    value = (string) backupAttributeCollection["ldv_minutes"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Minutes");
					SetAttributeValue("ldv_minutes", value);
				OnPropertyChanged("Minutes");
			}
		}

		[AttributeLogicalName("ldv_month")]
		public MonthEnum? Month
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_month");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_month"))
				    value = (OptionSetValue) backupAttributeCollection["ldv_month"];
                return value == null ? (MonthEnum?) null : (MonthEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Month");
                if (value != null)
				    SetAttributeValue("ldv_month", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("ldv_month", value);
				OnPropertyChanged("Month");
			}
		}

		[AttributeLogicalName("ldv_months"), MaxLength(4000)]
		public string Months
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_months");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_months"))
				    value = (string) backupAttributeCollection["ldv_months"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Months");
					SetAttributeValue("ldv_months", value);
				OnPropertyChanged("Months");
			}
		}

        /// <summary>
        /// [Required][MaximumLength=100] 
		/// 'ldv_name'.<br />
        /// The name of the custom entity.
        /// </summary>
		[AttributeLogicalName("ldv_name"), Required, MaxLength(100)]
		public string Name
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_name"))
				    value = (string) backupAttributeCollection["ldv_name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Name");
					SetAttributeValue("ldv_name", value);
				OnPropertyChanged("Name");
			}
		}

        /// <summary>
        ///  
		/// 'ldv_recurrenceruleexceptionId'.<br />
        /// Unique identifier for entity instances
        /// </summary>
		[AttributeLogicalName("ldv_recurrenceruleexceptionid")]
		public Guid? RecurrenceRuleExceptionId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_recurrenceruleexceptionid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_recurrenceruleexceptionid"))
				    value = (Guid?) backupAttributeCollection["ldv_recurrenceruleexceptionid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecurrenceRuleExceptionId");
                if (value != null)
					SetAttributeValue("ldv_recurrenceruleexceptionid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("RecurrenceRuleExceptionId");
			}
		}

		[AttributeLogicalName("ldv_startdate")]
		public DateTime? StartDate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("ldv_startdate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_startdate"))
				    value = (DateTime?) backupAttributeCollection["ldv_startdate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("StartDate");
					SetAttributeValue("ldv_startdate", value);
				OnPropertyChanged("StartDate");
			}
		}

		[AttributeLogicalName("ldv_weekday")]
		public WeekDayEnum? WeekDay
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_weekday");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_weekday"))
				    value = (OptionSetValue) backupAttributeCollection["ldv_weekday"];
                return value == null ? (WeekDayEnum?) null : (WeekDayEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("WeekDay");
                if (value != null)
				    SetAttributeValue("ldv_weekday", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("ldv_weekday", value);
				OnPropertyChanged("WeekDay");
			}
		}

		[AttributeLogicalName("ldv_weekdays"), MaxLength(4000)]
		public string WeekDays
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_weekdays");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_weekdays"))
				    value = (string) backupAttributeCollection["ldv_weekdays"];
			    return value;
			}
			set
			{
				OnPropertyChanging("WeekDays");
					SetAttributeValue("ldv_weekdays", value);
				OnPropertyChanged("WeekDays");
			}
		}

		[AttributeLogicalName("ldv_years"), MaxLength(4000)]
		public string Years
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_years");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_years"))
				    value = (string) backupAttributeCollection["ldv_years"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Years");
					SetAttributeValue("ldv_years", value);
				OnPropertyChanged("Years");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the record was modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByDelegate");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedByDelegate");
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overriddencreatedon"))
				    value = (DateTime?) backupAttributeCollection["overriddencreatedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordCreatedOn");
					SetAttributeValue("overriddencreatedon", value);
				OnPropertyChanged("RecordCreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'OwnerId'.<br />
        /// Owner Id
        /// </summary>
		[AttributeLogicalName("ownerid")]
		public EntityReference Owner
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Owner");
					SetAttributeValue("ownerid", value);
				OnPropertyChanged("Owner");
			}
		}

        public string OwnerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningBusinessUnit'.<br />
        /// Unique identifier for the business unit that owns the record
        /// </summary>
		[AttributeLogicalName("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningBusinessUnit");
                if (value != null)
				    SetAttributeValue("owningbusinessunit", new EntityReference("businessunit", value.Value));
                else
					SetAttributeValue("owningbusinessunit", value);
				OnPropertyChanged("OwningBusinessUnit");
			}
		}

        public string OwningBusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningTeam'.<br />
        /// Unique identifier for the team that owns the record.
        /// </summary>
		[AttributeLogicalName("owningteam")]
		public Guid? OwningTeam
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningTeam");
                if (value != null)
				    SetAttributeValue("owningteam", new EntityReference("team", value.Value));
                else
					SetAttributeValue("owningteam", value);
				OnPropertyChanged("OwningTeam");
			}
		}

        public string OwningTeamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningUser'.<br />
        /// Unique identifier for the user that owns the record.
        /// </summary>
		[AttributeLogicalName("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningUser");
                if (value != null)
				    SetAttributeValue("owninguser", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("owninguser", value);
				OnPropertyChanged("OwningUser");
			}
		}

        public string OwningUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'statecode'.<br />
        /// Status of the Recurrence Rule Exception
        /// </summary>
		[AttributeLogicalName("statecode")]
		public StatusEnum? Status
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                return value == null ? (StatusEnum?) null : (StatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Status");
                if (value != null)
				    SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statecode", value);
				OnPropertyChanged("Status");
			}
		}

        /// <summary>
        ///  
		/// 'statuscode'.<br />
        /// Reason for the status of the Recurrence Rule Exception
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public StatusReasonEnum? StatusReason
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                return value == null ? (StatusReasonEnum?) null : (StatusReasonEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("StatusReason");
                if (value != null)
				    SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statuscode", value);
				OnPropertyChanged("StatusReason");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber"), InRange("-1", "2147483647", typeof(int))]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezoneruleversionnumber"))
				    value = (int?) backupAttributeCollection["timezoneruleversionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneRuleVersionNumber");
					SetAttributeValue("timezoneruleversionnumber", value);
				OnPropertyChanged("TimeZoneRuleVersionNumber");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode"), InRange("-1", "2147483647", typeof(int))]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("utcconversiontimezonecode"))
				    value = (int?) backupAttributeCollection["utcconversiontimezonecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UTCConversionTimeZoneCode");
					SetAttributeValue("utcconversiontimezonecode", value);
				OnPropertyChanged("UTCConversionTimeZoneCode");
			}
		}

		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		
		/// <summary>
		/// N:N, 'ldv_ldv_recurrencerule_ldv_recurrenceruleexce'
		/// </summary>
		[RelationshipSchemaName("ldv_ldv_recurrencerule_ldv_recurrenceruleexce")]
		public RecurrenceRule[] Rules

		{
			get
			{
				var enumerable = GetRelatedEntities<RecurrenceRule>("ldv_ldv_recurrencerule_ldv_recurrenceruleexce", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("Rules");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<RecurrenceRule>("ldv_ldv_recurrencerule_ldv_recurrenceruleexce", null, value);
				OnPropertyChanged("Rules");
			}
		}
		
		/// <summary>
		/// N:N, 'ldv_ldv_recurrenceruleexceptiongrouping_ldv_r'
		/// </summary>
		[RelationshipSchemaName("ldv_ldv_recurrenceruleexceptiongrouping_ldv_r")]
		public RecurrenceRuleExceptionGrouping[] ExceptionGroups

		{
			get
			{
				var enumerable = GetRelatedEntities<RecurrenceRuleExceptionGrouping>("ldv_ldv_recurrenceruleexceptiongrouping_ldv_r", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("ExceptionGroups");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<RecurrenceRuleExceptionGrouping>("ldv_ldv_recurrenceruleexceptiongrouping_ldv_r", null, value);
				OnPropertyChanged("ExceptionGroups");
			}
		}
		
		public static class RelationNames {
			public static RelationName Rules = new RelationName("Rules");
			public static RelationName ExceptionGroups = new RelationName("ExceptionGroups");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["Rules"] = new object[] { "Rules", "ldv_recurrencerule", "ldv_ldv_recurrencerule_ldv_recurrenceruleex", "ldv_recurrenceruleid", "ldv_recurrenceruleid", "ldv_recurrenceruleexceptionid", "ldv_recurrenceruleexceptionid", "ldv_ldv_recurrencerule_ldv_recurrenceruleexce", typeof (RecurrenceRule[]) };
			relationProperties["ExceptionGroups"] = new object[] { "ExceptionGroups", "ldv_recurrenceruleexceptiongrouping", "ldv_ldv_recurrenceruleexceptiongrouping_ldv", "ldv_recurrenceruleexceptiongroupingid", "ldv_recurrenceruleexceptiongroupingid", "ldv_recurrenceruleexceptionid", "ldv_recurrenceruleexceptionid", "ldv_ldv_recurrenceruleexceptiongrouping_ldv_r", typeof (RecurrenceRuleExceptionGrouping[]) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public RecurrenceRuleException(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["ldv_recurrenceruleexceptionid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		#region Month

		public enum MonthEnum
		{
			[EnumMember]January = 1,
			[EnumMember]February = 2,
			[EnumMember]March = 3,
			[EnumMember]April = 4,
			[EnumMember]May = 5,
			[EnumMember]June = 6,
			[EnumMember]July = 7,
			[EnumMember]August = 8,
			[EnumMember]September = 9,
			[EnumMember]October = 10,
			[EnumMember]November = 11,
			[EnumMember]December = 12,
		}

		#endregion
	
		#region WeekDay

		public enum WeekDayEnum
		{
			[EnumMember]Sunday = 1,
			[EnumMember]Monday = 2,
			[EnumMember]Tuesday = 3,
			[EnumMember]Wednesday = 4,
			[EnumMember]Thursday = 5,
			[EnumMember]Friday = 6,
			[EnumMember]Saturday = 7,
		}

		#endregion
	
		#region Status

		public enum StatusEnum
		{
			[EnumMember]Active = 0,
			[EnumMember]Inactive = 1,
		}

		#endregion
	
		#region StatusReason

		public enum StatusReasonEnum
		{
			[EnumMember]Active = 1,
			[EnumMember]Inactive = 2,
		}

		#endregion
	
		#endregion

		#region Metadata

		#endregion
	}

	#endregion

	#region RecurrenceRuleExceptionGrouping

	/// <summary>
	/// 'ldv_recurrenceruleexceptiongrouping'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("ldv_recurrenceruleexceptiongrouping")]
	public partial class RecurrenceRuleExceptionGrouping : GeneratedEntity<RecurrenceRuleExceptionGrouping.RelationName>
	{
		
		public RecurrenceRuleExceptionGrouping() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Recurrence Rule Exception Grouping";
		public const string SchemaName = "ldv_recurrenceruleexceptiongrouping";
		public const string EntityLogicalName = "ldv_recurrenceruleexceptiongrouping";
		public const int EntityTypeCode = 10015;
		
		#region Attributes

		[AttributeLogicalName("ldv_recurrenceruleexceptiongroupingid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (RecurrenceRuleExceptionGroupingId == null || RecurrenceRuleExceptionGroupingId == Guid.Empty) ? base.Id : RecurrenceRuleExceptionGroupingId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("ldv_recurrenceruleexceptiongroupingid");
                    base.Id = value;
                } else {
				    RecurrenceRuleExceptionGroupingId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the record.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the record was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the record.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByDelegate");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedByDelegate");
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Sequence number of the import that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("importsequencenumber"))
				    value = (int?) backupAttributeCollection["importsequencenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ImportSequenceNumber");
					SetAttributeValue("importsequencenumber", value);
				OnPropertyChanged("ImportSequenceNumber");
			}
		}

        /// <summary>
        /// [Required][MaximumLength=100] 
		/// 'ldv_name'.<br />
        /// The name of the custom entity.
        /// </summary>
		[AttributeLogicalName("ldv_name"), Required, MaxLength(100)]
		public string Name
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_name"))
				    value = (string) backupAttributeCollection["ldv_name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Name");
					SetAttributeValue("ldv_name", value);
				OnPropertyChanged("Name");
			}
		}

        /// <summary>
        ///  
		/// 'ldv_recurrenceruleexceptiongroupingId'.<br />
        /// Unique identifier for entity instances
        /// </summary>
		[AttributeLogicalName("ldv_recurrenceruleexceptiongroupingid")]
		public Guid? RecurrenceRuleExceptionGroupingId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_recurrenceruleexceptiongroupingid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_recurrenceruleexceptiongroupingid"))
				    value = (Guid?) backupAttributeCollection["ldv_recurrenceruleexceptiongroupingid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecurrenceRuleExceptionGroupingId");
                if (value != null)
					SetAttributeValue("ldv_recurrenceruleexceptiongroupingid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("RecurrenceRuleExceptionGroupingId");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the record was modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByDelegate");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedByDelegate");
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overriddencreatedon"))
				    value = (DateTime?) backupAttributeCollection["overriddencreatedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordCreatedOn");
					SetAttributeValue("overriddencreatedon", value);
				OnPropertyChanged("RecordCreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'OwnerId'.<br />
        /// Owner Id
        /// </summary>
		[AttributeLogicalName("ownerid")]
		public EntityReference Owner
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Owner");
					SetAttributeValue("ownerid", value);
				OnPropertyChanged("Owner");
			}
		}

        public string OwnerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningBusinessUnit'.<br />
        /// Unique identifier for the business unit that owns the record
        /// </summary>
		[AttributeLogicalName("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningBusinessUnit");
                if (value != null)
				    SetAttributeValue("owningbusinessunit", new EntityReference("businessunit", value.Value));
                else
					SetAttributeValue("owningbusinessunit", value);
				OnPropertyChanged("OwningBusinessUnit");
			}
		}

        public string OwningBusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningTeam'.<br />
        /// Unique identifier for the team that owns the record.
        /// </summary>
		[AttributeLogicalName("owningteam")]
		public Guid? OwningTeam
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningTeam");
                if (value != null)
				    SetAttributeValue("owningteam", new EntityReference("team", value.Value));
                else
					SetAttributeValue("owningteam", value);
				OnPropertyChanged("OwningTeam");
			}
		}

        public string OwningTeamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningUser'.<br />
        /// Unique identifier for the user that owns the record.
        /// </summary>
		[AttributeLogicalName("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningUser");
                if (value != null)
				    SetAttributeValue("owninguser", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("owninguser", value);
				OnPropertyChanged("OwningUser");
			}
		}

        public string OwningUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'statecode'.<br />
        /// Status of the Recurrence Rule Exception Grouping
        /// </summary>
		[AttributeLogicalName("statecode")]
		public StatusEnum? Status
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                return value == null ? (StatusEnum?) null : (StatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Status");
                if (value != null)
				    SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statecode", value);
				OnPropertyChanged("Status");
			}
		}

        /// <summary>
        ///  
		/// 'statuscode'.<br />
        /// Reason for the status of the Recurrence Rule Exception Grouping
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public StatusReasonEnum? StatusReason
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                return value == null ? (StatusReasonEnum?) null : (StatusReasonEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("StatusReason");
                if (value != null)
				    SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statuscode", value);
				OnPropertyChanged("StatusReason");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber"), InRange("-1", "2147483647", typeof(int))]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezoneruleversionnumber"))
				    value = (int?) backupAttributeCollection["timezoneruleversionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneRuleVersionNumber");
					SetAttributeValue("timezoneruleversionnumber", value);
				OnPropertyChanged("TimeZoneRuleVersionNumber");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode"), InRange("-1", "2147483647", typeof(int))]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("utcconversiontimezonecode"))
				    value = (int?) backupAttributeCollection["utcconversiontimezonecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UTCConversionTimeZoneCode");
					SetAttributeValue("utcconversiontimezonecode", value);
				OnPropertyChanged("UTCConversionTimeZoneCode");
			}
		}

		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		
		/// <summary>
		/// N:N, 'ldv_ldv_recurrencerule_ldv_recurrenceexgroup'
		/// </summary>
		[RelationshipSchemaName("ldv_ldv_recurrencerule_ldv_recurrenceexgroup")]
		public RecurrenceRule[] Rules

		{
			get
			{
				var enumerable = GetRelatedEntities<RecurrenceRule>("ldv_ldv_recurrencerule_ldv_recurrenceexgroup", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("Rules");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<RecurrenceRule>("ldv_ldv_recurrencerule_ldv_recurrenceexgroup", null, value);
				OnPropertyChanged("Rules");
			}
		}
		
		/// <summary>
		/// N:N, 'ldv_ldv_recurrenceruleexceptiongrouping_ldv_r'
		/// </summary>
		[RelationshipSchemaName("ldv_ldv_recurrenceruleexceptiongrouping_ldv_r")]
		public RecurrenceRuleException[] Exceptions

		{
			get
			{
				var enumerable = GetRelatedEntities<RecurrenceRuleException>("ldv_ldv_recurrenceruleexceptiongrouping_ldv_r", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("Exceptions");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<RecurrenceRuleException>("ldv_ldv_recurrenceruleexceptiongrouping_ldv_r", null, value);
				OnPropertyChanged("Exceptions");
			}
		}
		
		public static class RelationNames {
			public static RelationName Rules = new RelationName("Rules");
			public static RelationName Exceptions = new RelationName("Exceptions");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["Rules"] = new object[] { "Rules", "ldv_recurrencerule", "ldv_ldv_recurrencerule_ldv_recurrenceexgrou", "ldv_recurrenceruleid", "ldv_recurrenceruleid", "ldv_recurrenceruleexceptiongroupingid", "ldv_recurrenceruleexceptiongroupingid", "ldv_ldv_recurrencerule_ldv_recurrenceexgroup", typeof (RecurrenceRule[]) };
			relationProperties["Exceptions"] = new object[] { "Exceptions", "ldv_recurrenceruleexception", "ldv_ldv_recurrenceruleexceptiongrouping_ldv", "ldv_recurrenceruleexceptionid", "ldv_recurrenceruleexceptionid", "ldv_recurrenceruleexceptiongroupingid", "ldv_recurrenceruleexceptiongroupingid", "ldv_ldv_recurrenceruleexceptiongrouping_ldv_r", typeof (RecurrenceRuleException[]) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public RecurrenceRuleExceptionGrouping(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["ldv_recurrenceruleexceptiongroupingid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		#region Status

		public enum StatusEnum
		{
			[EnumMember]Active = 0,
			[EnumMember]Inactive = 1,
		}

		#endregion
	
		#region StatusReason

		public enum StatusReasonEnum
		{
			[EnumMember]Active = 1,
			[EnumMember]Inactive = 2,
		}

		#endregion
	
		#endregion

		#region Metadata

		#endregion
	}

	#endregion

	#endregion

}

